[
  {
    "question": "How do you rewrite commit history using git rebase?",
    "answer": "You can rewrite commit history using `git rebase -i HEAD~n`, where `n` is the number of commits you want to modify. This opens an interactive editor where you can squash, edit, or reword commits. Be careful when rebasing public branches, as it rewrites history.",
    "tags": [
      "git",
      "rebase",
      "history",
      "commits"
    ],
    "related": [
      "How do you squash commits in Git?",
      "How do you undo the last commit in Git?"
    ]
  },
  {
    "question": "What is git bisect, and how do you use it for debugging?",
    "answer": "`git bisect` helps identify the commit that introduced a bug by performing a binary search. You start with `git bisect start`, then mark good and bad commits using `git bisect good` and `git bisect bad`. Git checks out intermediate commits so you can test them until the faulty one is found.",
    "tags": [
      "git",
      "bisect",
      "debugging",
      "bugs"
    ],
    "related": [
      "How do you use git log to find breaking changes?",
      "How do you use Git blame to trace bugs?"
    ]
  },
  {
    "question": "How do you track changes to a specific line of code over time?",
    "answer": "Use `git blame <file>` to see which commit last modified each line of a file. For even more detailed history, combine with `git log -L <start,end>:<file>` to view changes to a specific line range.",
    "tags": [
      "git",
      "blame",
      "line-tracking",
      "file-history"
    ],
    "related": [
      "How do you use git log with line numbers?",
      "How do you inspect file change history in Git?"
    ]
  },
  {
    "question": "How do you split a single commit into multiple commits?",
    "answer": "Use `git reset -soft HEAD~1` to undo the commit while keeping changes staged. Then, use `git add -p` to selectively stage portions and commit them separately. This allows you to split a large commit into smaller, meaningful ones.",
    "tags": [
      "git",
      "commit",
      "reset",
      "staging"
    ],
    "related": [
      "How do you squash multiple commits into one?",
      "How do you edit a commit message in Git?"
    ]
  },
  {
    "question": "How do you combine multiple commits into one using interactive rebase?",
    "answer": "Run `git rebase -i HEAD~n`, where `n` is the number of recent commits. Change all but the first commit\u2019s action to `squash` or `fixup`. This will merge them into one and let you write a new combined commit message.",
    "tags": [
      "git",
      "rebase",
      "squash",
      "commits"
    ],
    "related": [
      "How do you rewrite commit history using git rebase?",
      "How do you amend the last commit in Git?"
    ]
  },
  {
    "question": "What are GitHub Pages, and how do you use them?",
    "answer": "GitHub Pages is a free static site hosting service that takes HTML, CSS, and JS files from your repository and serves them as a website. To use it, push your code to a branch like `gh-pages` or the `/docs` folder on `main`, and enable GitHub Pages in the repo settings.",
    "tags": [
      "github",
      "pages",
      "hosting",
      "static-site"
    ],
    "related": [
      "How do you deploy a static website using GitHub Pages?",
      "How do you configure a custom domain for GitHub Pages?"
    ]
  },
  {
    "question": "How do you deploy a static website using GitHub Pages?",
    "answer": "Push your HTML/CSS files to the `gh-pages` branch or a `/docs` folder on the `main` branch. Then, go to your repo settings, enable GitHub Pages, and select the source branch. Your site will be hosted at `https://<username>.github.io/<repo>`.",
    "tags": [
      "github",
      "pages",
      "deployment",
      "static-site"
    ],
    "related": [
      "What are GitHub Pages, and how do you use them?",
      "How do you configure a custom domain for GitHub Pages?"
    ]
  },
  {
    "question": "How do you configure a custom domain for GitHub Pages?",
    "answer": "Create a `CNAME` file in the root of your GitHub Pages repo with your custom domain. Then, update your DNS provider to point to GitHub\u2019s IPs. GitHub Pages will serve your site at the custom domain.",
    "tags": [
      "github",
      "pages",
      "domain",
      "dns"
    ],
    "related": [
      "How do you deploy a static website using GitHub Pages?",
      "How do you enable HTTPS for a custom GitHub Pages domain?"
    ]
  },
  {
    "question": "How do you troubleshoot deployment issues on GitHub Pages?",
    "answer": "Check for errors in the Actions tab if you\u2019re using a CI/CD pipeline. Ensure that the `gh-pages` branch or `/docs` folder exists and contains an `index.html`. Verify DNS settings for custom domains and confirm GitHub Pages is enabled in repo settings.",
    "tags": [
      "github",
      "pages",
      "debugging",
      "deployment"
    ],
    "related": [
      "How do you configure a custom domain for GitHub Pages?",
      "What are GitHub Pages, and how do you use them?"
    ]
  },
  {
    "question": "What is the difference between user pages and project pages on GitHub?",
    "answer": "User pages are tied to the `<username>.github.io` repository and serve from the `main` or `master` branch. Project pages are tied to any other repo and typically serve from the `gh-pages` branch or `/docs` folder. URLs differ based on these contexts.",
    "tags": [
      "github",
      "pages",
      "user-site",
      "project-site"
    ],
    "related": [
      "What are GitHub Pages, and how do you use them?",
      "How do you deploy a static website using GitHub Pages?"
    ]
  },
  {
    "question": "What is a Git submodule, and how do you use it?",
    "answer": "A submodule allows you to include another Git repository inside your own. Use `git submodule add <repo-url>` to add one. It keeps a specific commit of the submodule repo, useful for including dependencies or shared components.",
    "tags": [
      "git",
      "submodule",
      "nested-repo",
      "dependency"
    ],
    "related": [
      "How do you add a submodule to a Git repository?",
      "How do you update a submodule in Git?"
    ]
  },
  {
    "question": "How do you add a submodule to a Git repository?",
    "answer": "Use `git submodule add <repository-url> <path>`. This clones the submodule and creates a `.gitmodules` file. The main repo tracks the specific commit of the submodule.",
    "tags": [
      "git",
      "submodule",
      "dependency"
    ],
    "related": [
      "What is a Git submodule, and how do you use it?",
      "How do you update a submodule in Git?"
    ]
  },
  {
    "question": "How do you update a submodule in Git?",
    "answer": "Navigate to the submodule directory and run `git pull` or `git checkout <commit>`. Then in the main repo, commit the submodule change to track the new commit.",
    "tags": [
      "git",
      "submodule",
      "update"
    ],
    "related": [
      "How do you add a submodule to a Git repository?",
      "How do you remove a submodule from a Git repository?"
    ]
  },
  {
    "question": "How do you remove a submodule from a Git repository?",
    "answer": "Run `git submodule deinit <path>` to unregister the submodule, remove the submodule directory, delete its entry in `.gitmodules` and `.git/config`, then commit these changes.",
    "tags": [
      "git",
      "submodule",
      "remove"
    ],
    "related": [
      "How do you add a submodule to a Git repository?",
      "What is a Git submodule, and how do you use it?"
    ]
  },
  {
    "question": "What are the pros and cons of using Git submodules?",
    "answer": "Pros: Isolates codebases, keeps dependencies versioned. Cons: Can be hard to manage, adds complexity, requires manual updates. Better alternatives exist for some use cases (e.g., monorepos or package managers).",
    "tags": [
      "git",
      "submodule",
      "advantages",
      "disadvantages"
    ],
    "related": [
      "What is a Git submodule, and how do you use it?",
      "How do you update a submodule in Git?"
    ]
  },
  {
    "question": "How do you fix the 'merge conflict in .gitignore' error?",
    "answer": "Open `.gitignore`, find the conflict markers (`<<<<<<<`, `=======`, `>>>>>>>`), and resolve the conflict by choosing which rules to keep. After resolving, run `git add .gitignore` and commit.",
    "tags": [
      "git",
      "conflict",
      "gitignore"
    ],
    "related": [
      "How do you resolve merge conflicts in Git?",
      "What causes merge conflicts in tracked files?"
    ]
  },
  {
    "question": "How do you resolve the 'repository not found' error in GitHub?",
    "answer": "Check the repository URL, ensure it exists and is public (or you have access). For private repos, verify you are authenticated properly via SSH or HTTPS.",
    "tags": [
      "github",
      "error",
      "repository",
      "authentication"
    ],
    "related": [
      "How do you set up SSH keys for GitHub?",
      "How do you push changes to a remote repository?"
    ]
  },
  {
    "question": "What should you do if git push rejects your changes due to an 'update rejected' error?",
    "answer": "This usually happens when your local branch is behind the remote. Run `git pull --rebase` to update your branch, resolve any conflicts, and then push again.",
    "tags": [
      "git",
      "push",
      "error",
      "rebase"
    ],
    "related": [
      "How do you resolve merge conflicts in Git?",
      "How do you rebase a branch before pushing?"
    ]
  },
  {
    "question": "How do you recover from an accidental force push?",
    "answer": "Use `git reflog` to view recent branch history. Identify the previous commit hash and run `git reset --hard <commit-hash>` to restore it. Push again with `--force-with-lease`.",
    "tags": [
      "git",
      "reflog",
      "force-push",
      "recovery"
    ],
    "related": [
      "How do you use git reflog to recover lost commits?",
      "How do you undo the last commit in Git?"
    ]
  },
  {
    "question": "How do you resolve the 'remote: Permission to [repository] denied' error?",
    "answer": "This error usually means your authentication failed. If you're using HTTPS, make sure your credentials are correct or use a personal access token. For SSH, confirm that your public key is added to your GitHub account using `ssh -T git@github.com` to test the connection.",
    "tags": [
      "github",
      "authentication",
      "ssh",
      "https",
      "permission"
    ],
    "related": [
      "How do you set up SSH keys for GitHub?",
      "What should you do if git push rejects your changes?"
    ]
  },
  {
    "question": "How do you set up SSH keys for GitHub?",
    "answer": "Generate a key pair with `ssh-keygen -t ed25519 -C \"your_email@example.com\"`, then add the public key to your GitHub account under Settings > SSH and GPG keys. Test with `ssh -T git@github.com`.",
    "tags": [
      "github",
      "ssh",
      "authentication",
      "security"
    ],
    "related": [
      "How do you resolve GitHub permission errors?",
      "How do you recover from losing your SSH key?"
    ]
  },
  {
    "question": "What is the difference between HTTPS and SSH for GitHub authentication?",
    "answer": "HTTPS requires entering username/password or a personal access token, while SSH uses public-key cryptography for authentication. SSH is more secure and avoids credential prompts.",
    "tags": [
      "github",
      "ssh",
      "https",
      "authentication"
    ],
    "related": [
      "How do you set up SSH keys for GitHub?",
      "How do you rotate access tokens securely in GitHub workflows?"
    ]
  },
  {
    "question": "How do you manage personal access tokens for GitHub?",
    "answer": "Go to GitHub > Settings > Developer Settings > Personal Access Tokens. Generate a token with the required scopes and use it in place of a password for HTTPS Git operations.",
    "tags": [
      "github",
      "security",
      "access-token",
      "authentication"
    ],
    "related": [
      "How do you authenticate API requests with a personal access token?",
      "How do you securely rotate personal access tokens?"
    ]
  },
  {
    "question": "How do you restrict branch access on GitHub?",
    "answer": "Enable branch protection rules under Settings > Branches. You can require pull requests, enforce status checks, disallow force pushes, and restrict who can push to the branch.",
    "tags": [
      "github",
      "branch",
      "security",
      "collaboration"
    ],
    "related": [
      "How do you implement branch protection rules on GitHub?",
      "How do you enforce repository policies in GitHub Enterprise?"
    ]
  },
  {
    "question": "How do you enable two-factor authentication for GitHub?",
    "answer": "Go to GitHub > Settings > Security, and enable 2FA using either an app like Google Authenticator or a hardware key. This adds an extra layer of security to your account.",
    "tags": [
      "github",
      "security",
      "2fa",
      "authentication"
    ],
    "related": [
      "How do you set up SSH keys for GitHub?",
      "What are best practices for securing GitHub accounts?"
    ]
  },
  {
    "question": "How do you optimize a large Git repository for better performance?",
    "answer": "Use `.gitignore` to avoid tracking unnecessary files, remove large unneeded files with `git filter-repo`, prune old branches, and enable Git's built-in garbage collection with `git gc`.",
    "tags": [
      "git",
      "performance",
      "optimization",
      "repository"
    ],
    "related": [
      "What is Git garbage collection and when should you use it?",
      "How do you manage large binary files in Git?"
    ]
  },
  {
    "question": "What is Git garbage collection, and when should you use it?",
    "answer": "`git gc` cleans up unnecessary files and optimizes local repository storage. It's useful after many changes or deletions, especially in large repositories. It compacts objects and removes dangling references.",
    "tags": [
      "git",
      "maintenance",
      "garbage-collection",
      "performance"
    ],
    "related": [
      "How do you optimize a large Git repository for better performance?",
      "What is the purpose of the index file in the .git folder?"
    ]
  },
  {
    "question": "How do you clone only a specific branch of a repository?",
    "answer": "Use `git clone --branch <branch-name> --single-branch <repo-url>` to clone just that branch instead of the entire history. This reduces download size and time.",
    "tags": [
      "git",
      "clone",
      "branch",
      "performance"
    ],
    "related": [
      "What are shallow clones in Git?",
      "How do you clone a repository from GitHub?"
    ]
  },
  {
    "question": "How do you prune unused remote-tracking branches?",
    "answer": "Run `git fetch --prune` to remove local references to remote branches that no longer exist. You can also use `git remote prune origin` to manually clean up tracking branches.",
    "tags": [
      "git",
      "remote",
      "branches",
      "cleanup"
    ],
    "related": [
      "How do you delete a branch in Git?",
      "How do you clean up stale branches?"
    ]
  },
  {
    "question": "How do you work with sparse checkouts in Git?",
    "answer": "Enable sparse-checkout with `git sparse-checkout init` and specify folders with `set`. This allows you to clone or check out only parts of a repository without fetching everything.",
    "tags": [
      "git",
      "performance",
      "sparse-checkout",
      "repository"
    ],
    "related": [
      "What are shallow clones and how do they help?",
      "How do you optimize Git operations in large repos?"
    ]
  },
  {
    "question": "What is a Git worktree, and how do you use it?",
    "answer": "Git worktrees allow multiple working directories linked to the same repo. Use `git worktree add <path> <branch>` to create one. Useful for working on different branches simultaneously.",
    "tags": [
      "git",
      "worktree",
      "workflow",
      "branches"
    ],
    "related": [
      "How do you create a new worktree in Git?",
      "What\u2019s the difference between worktrees and branches?"
    ]
  },
  {
    "question": "How do you create a new worktree in Git?",
    "answer": "Run `git worktree add <path> <branch>` to create a new worktree directory. If the branch doesn\u2019t exist, Git will create it. Useful for testing or isolated dev environments.",
    "tags": [
      "git",
      "worktree",
      "branches",
      "isolation"
    ],
    "related": [
      "What is a Git worktree and how do you use it?",
      "How do you remove a worktree in Git?"
    ]
  },
  {
    "question": "What is the difference between worktrees and branches?",
    "answer": "Branches are separate lines of development, while worktrees are additional working directories tied to branches. Worktrees let you work on multiple branches at once without switching context.",
    "tags": [
      "git",
      "branches",
      "worktree",
      "parallel"
    ],
    "related": [
      "How do you create a new worktree in Git?",
      "What is a Git worktree and how do you use it?"
    ]
  },
  {
    "question": "How do you remove a worktree in Git?",
    "answer": "Use `git worktree remove <path>` to remove the directory and detach the branch. Also run `git worktree prune` to clean up references to deleted worktrees.",
    "tags": [
      "git",
      "worktree",
      "cleanup"
    ],
    "related": [
      "What is a Git worktree and how do you use it?",
      "How do you prune Git repositories?"
    ]
  },
  {
    "question": "How do you troubleshoot issues with Git worktrees?",
    "answer": "Use `git worktree list` to verify paths. If a worktree is broken, you may need to prune it. Check for lock files in `.git/worktrees` and clear stale references.",
    "tags": [
      "git",
      "worktree",
      "debugging"
    ],
    "related": [
      "How do you remove a worktree in Git?",
      "What is the difference between worktrees and branches?"
    ]
  },
  {
    "question": "How do you synchronize changes between your local branch and a remote branch?",
    "answer": "Run `git fetch` to retrieve updates from remote, then `git pull` to merge or rebase those changes. Push your changes with `git push origin <branch>` to keep remote in sync.",
    "tags": [
      "git",
      "sync",
      "remote",
      "pull",
      "push"
    ],
    "related": [
      "What is the difference between git fetch and git pull?",
      "How do you push changes to a remote repository?"
    ]
  },
  {
    "question": "What is the difference between a pull request and a merge request in GitHub?",
    "answer": "They are functionally the same: a way to propose code changes before merging. GitHub calls them pull requests, while GitLab uses the term merge requests.",
    "tags": [
      "github",
      "pull-request",
      "merge-request",
      "collaboration"
    ],
    "related": [
      "How do you review and test a pull request before merging it?",
      "How do you handle conflicts in pull requests?"
    ]
  },
  {
    "question": "How do you handle conflicts in pull requests on GitHub?",
    "answer": "GitHub shows a 'Resolve conflicts' button when merging. You can resolve via the web editor or locally by checking out the branch, resolving conflicts, committing, and pushing the updated branch.",
    "tags": [
      "github",
      "pull-request",
      "conflict",
      "merge"
    ],
    "related": [
      "How do you resolve merge conflicts in Git?",
      "How do you review a pull request before merging?"
    ]
  },
  {
    "question": "How do you review and test a pull request before merging it?",
    "answer": "You can comment, request changes, or approve using GitHub\u2019s pull request interface. Run automated tests via GitHub Actions, and test the code locally by checking out the PR branch.",
    "tags": [
      "github",
      "pull-request",
      "review",
      "ci/cd"
    ],
    "related": [
      "How do you automate testing for pull requests?",
      "What is the purpose of GitHub Actions?"
    ]
  },
  {
    "question": "How do you resolve the 'remote: Permission to [repository] denied' error?",
    "answer": "This error usually means your authentication failed. If you're using HTTPS, make sure your credentials are correct or use a personal access token. For SSH, confirm that your public key is added to your GitHub account using `ssh -T git@github.com` to test the connection.",
    "tags": [
      "github",
      "authentication",
      "ssh",
      "https",
      "permission"
    ],
    "related": [
      "How do you set up SSH keys for GitHub?",
      "What should you do if git push rejects your changes?"
    ]
  },
  {
    "question": "How do you set up SSH keys for GitHub?",
    "answer": "Generate a key pair with `ssh-keygen -t ed25519 -C \"your_email@example.com\"`, then add the public key to your GitHub account under Settings > SSH and GPG keys. Test with `ssh -T git@github.com`.",
    "tags": [
      "github",
      "ssh",
      "authentication",
      "security"
    ],
    "related": [
      "How do you resolve GitHub permission errors?",
      "How do you recover from losing your SSH key?"
    ]
  },
  {
    "question": "What is the difference between HTTPS and SSH for GitHub authentication?",
    "answer": "HTTPS requires entering username/password or a personal access token, while SSH uses public-key cryptography for authentication. SSH is more secure and avoids credential prompts.",
    "tags": [
      "github",
      "ssh",
      "https",
      "authentication"
    ],
    "related": [
      "How do you set up SSH keys for GitHub?",
      "How do you rotate access tokens securely in GitHub workflows?"
    ]
  },
  {
    "question": "How do you manage personal access tokens for GitHub?",
    "answer": "Go to GitHub > Settings > Developer Settings > Personal Access Tokens. Generate a token with the required scopes and use it in place of a password for HTTPS Git operations.",
    "tags": [
      "github",
      "security",
      "access-token",
      "authentication"
    ],
    "related": [
      "How do you authenticate API requests with a personal access token?",
      "How do you securely rotate personal access tokens?"
    ]
  },
  {
    "question": "How do you restrict branch access on GitHub?",
    "answer": "Enable branch protection rules under Settings > Branches. You can require pull requests, enforce status checks, disallow force pushes, and restrict who can push to the branch.",
    "tags": [
      "github",
      "branch",
      "security",
      "collaboration"
    ],
    "related": [
      "How do you implement branch protection rules on GitHub?",
      "How do you enforce repository policies in GitHub Enterprise?"
    ]
  },
  {
    "question": "How do you enable two-factor authentication for GitHub?",
    "answer": "Go to GitHub > Settings > Security, and enable 2FA using either an app like Google Authenticator or a hardware key. This adds an extra layer of security to your account.",
    "tags": [
      "github",
      "security",
      "2fa",
      "authentication"
    ],
    "related": [
      "How do you set up SSH keys for GitHub?",
      "What are best practices for securing GitHub accounts?"
    ]
  },
  {
    "question": "How do you optimize a large Git repository for better performance?",
    "answer": "Use `.gitignore` to avoid tracking unnecessary files, remove large unneeded files with `git filter-repo`, prune old branches, and enable Git's built-in garbage collection with `git gc`.",
    "tags": [
      "git",
      "performance",
      "optimization",
      "repository"
    ],
    "related": [
      "What is Git garbage collection and when should you use it?",
      "How do you manage large binary files in Git?"
    ]
  },
  {
    "question": "What is Git garbage collection, and when should you use it?",
    "answer": "`git gc` cleans up unnecessary files and optimizes local repository storage. It's useful after many changes or deletions, especially in large repositories. It compacts objects and removes dangling references.",
    "tags": [
      "git",
      "maintenance",
      "garbage-collection",
      "performance"
    ],
    "related": [
      "How do you optimize a large Git repository for better performance?",
      "What is the purpose of the index file in the .git folder?"
    ]
  },
  {
    "question": "How do you clone only a specific branch of a repository?",
    "answer": "Use `git clone --branch <branch-name> --single-branch <repo-url>` to clone just that branch instead of the entire history. This reduces download size and time.",
    "tags": [
      "git",
      "clone",
      "branch",
      "performance"
    ],
    "related": [
      "What are shallow clones in Git?",
      "How do you clone a repository from GitHub?"
    ]
  },
  {
    "question": "How do you prune unused remote-tracking branches?",
    "answer": "Run `git fetch --prune` to remove local references to remote branches that no longer exist. You can also use `git remote prune origin` to manually clean up tracking branches.",
    "tags": [
      "git",
      "remote",
      "branches",
      "cleanup"
    ],
    "related": [
      "How do you delete a branch in Git?",
      "How do you clean up stale branches?"
    ]
  },
  {
    "question": "How do you work with sparse checkouts in Git?",
    "answer": "Enable sparse-checkout with `git sparse-checkout init` and specify folders with `set`. This allows you to clone or check out only parts of a repository without fetching everything.",
    "tags": [
      "git",
      "performance",
      "sparse-checkout",
      "repository"
    ],
    "related": [
      "What are shallow clones and how do they help?",
      "How do you optimize Git operations in large repos?"
    ]
  },
  {
    "question": "What is a Git worktree, and how do you use it?",
    "answer": "Git worktrees allow multiple working directories linked to the same repo. Use `git worktree add <path> <branch>` to create one. Useful for working on different branches simultaneously.",
    "tags": [
      "git",
      "worktree",
      "workflow",
      "branches"
    ],
    "related": [
      "How do you create a new worktree in Git?",
      "What\u2019s the difference between worktrees and branches?"
    ]
  },
  {
    "question": "How do you create a new worktree in Git?",
    "answer": "Run `git worktree add <path> <branch>` to create a new worktree directory. If the branch doesn\u2019t exist, Git will create it. Useful for testing or isolated dev environments.",
    "tags": [
      "git",
      "worktree",
      "branches",
      "isolation"
    ],
    "related": [
      "What is a Git worktree and how do you use it?",
      "How do you remove a worktree in Git?"
    ]
  },
  {
    "question": "What is the difference between worktrees and branches?",
    "answer": "Branches are separate lines of development, while worktrees are additional working directories tied to branches. Worktrees let you work on multiple branches at once without switching context.",
    "tags": [
      "git",
      "branches",
      "worktree",
      "parallel"
    ],
    "related": [
      "How do you create a new worktree in Git?",
      "What is a Git worktree and how do you use it?"
    ]
  },
  {
    "question": "How do you remove a worktree in Git?",
    "answer": "Use `git worktree remove <path>` to remove the directory and detach the branch. Also run `git worktree prune` to clean up references to deleted worktrees.",
    "tags": [
      "git",
      "worktree",
      "cleanup"
    ],
    "related": [
      "What is a Git worktree and how do you use it?",
      "How do you prune Git repositories?"
    ]
  },
  {
    "question": "How do you troubleshoot issues with Git worktrees?",
    "answer": "Use `git worktree list` to verify paths. If a worktree is broken, you may need to prune it. Check for lock files in `.git/worktrees` and clear stale references.",
    "tags": [
      "git",
      "worktree",
      "debugging"
    ],
    "related": [
      "How do you remove a worktree in Git?",
      "What is the difference between worktrees and branches?"
    ]
  },
  {
    "question": "How do you synchronize changes between your local branch and a remote branch?",
    "answer": "Run `git fetch` to retrieve updates from remote, then `git pull` to merge or rebase those changes. Push your changes with `git push origin <branch>` to keep remote in sync.",
    "tags": [
      "git",
      "sync",
      "remote",
      "pull",
      "push"
    ],
    "related": [
      "What is the difference between git fetch and git pull?",
      "How do you push changes to a remote repository?"
    ]
  },
  {
    "question": "What is the difference between a pull request and a merge request in GitHub?",
    "answer": "They are functionally the same: a way to propose code changes before merging. GitHub calls them pull requests, while GitLab uses the term merge requests.",
    "tags": [
      "github",
      "pull-request",
      "merge-request",
      "collaboration"
    ],
    "related": [
      "How do you review and test a pull request before merging it?",
      "How do you handle conflicts in pull requests?"
    ]
  },
  {
    "question": "How do you handle conflicts in pull requests on GitHub?",
    "answer": "GitHub shows a 'Resolve conflicts' button when merging. You can resolve via the web editor or locally by checking out the branch, resolving conflicts, committing, and pushing the updated branch.",
    "tags": [
      "github",
      "pull-request",
      "conflict",
      "merge"
    ],
    "related": [
      "How do you resolve merge conflicts in Git?",
      "How do you review a pull request before merging?"
    ]
  },
  {
    "question": "How do you review and test a pull request before merging it?",
    "answer": "You can comment, request changes, or approve using GitHub\u2019s pull request interface. Run automated tests via GitHub Actions, and test the code locally by checking out the PR branch.",
    "tags": [
      "github",
      "pull-request",
      "review",
      "ci/cd"
    ],
    "related": [
      "How do you automate testing for pull requests?",
      "What is the purpose of GitHub Actions?"
    ]
  },
  {
    "question": "How do you integrate code reviews into your GitHub workflow?",
    "answer": "Code reviews can be integrated into your GitHub workflow using pull requests and branch protection rules. Require reviews before merging, enforce status checks, and use review tools or comments for feedback and suggestions.",
    "tags": [
      "github",
      "code-review",
      "workflow",
      "pull-request"
    ],
    "related": [
      "How do you review and test a pull request before merging it?",
      "How do you enforce branch protection rules on GitHub?"
    ]
  },
  {
    "question": "What is GitHub Copilot, and how does it assist with coding tasks?",
    "answer": "GitHub Copilot is an AI-powered code completion tool that suggests lines or blocks of code as you type. It uses OpenAI Codex and integrates into editors like VS Code to help write boilerplate code, functions, and even entire files.",
    "tags": [
      "github",
      "copilot",
      "ai",
      "coding-assistant"
    ],
    "related": [
      "How do you enable Codespaces for cloud-based development on GitHub?",
      "How do you write better pull request descriptions for maintainers?"
    ]
  },
  {
    "question": "How do you enable Codespaces for cloud-based development on GitHub?",
    "answer": "Go to your GitHub repository, click the `Code` button, then `Codespaces > New Codespace`. You need GitHub Pro or Teams to access it. Codespaces offers full dev environments in the cloud.",
    "tags": [
      "github",
      "codespaces",
      "cloud",
      "development"
    ],
    "related": [
      "What is GitHub Copilot, and how does it assist with coding tasks?",
      "How do you set up a GitHub repository for collaboration?"
    ]
  },
  {
    "question": "How do you use GitHub Discussions to collaborate on project ideas?",
    "answer": "Enable Discussions in the repository settings. Contributors can start topics under categories like Q&A, Ideas, or Show & Tell. This helps build community engagement beyond issues and pull requests.",
    "tags": [
      "github",
      "discussions",
      "collaboration",
      "community"
    ],
    "related": [
      "How do you engage with maintainers of a repository?",
      "What are GitHub Issues used for?"
    ]
  },
  {
    "question": "What is the difference between GitHub Projects and GitHub Issues?",
    "answer": "GitHub Issues are for tracking bugs and tasks, while GitHub Projects provide a Kanban-style board to organize and prioritize those issues. Projects help manage workflows across multiple repos.",
    "tags": [
      "github",
      "projects",
      "issues",
      "planning"
    ],
    "related": [
      "How do you integrate GitHub Issues with agile boards like Kanban?",
      "How do you manage team workflows using GitHub Projects?"
    ]
  },
  {
    "question": "How do you archive inactive repositories on GitHub?",
    "answer": "Go to your repository Settings > Danger Zone > Archive this repository. Archived repositories become read-only, preventing new issues, pull requests, or commits.",
    "tags": [
      "github",
      "repository",
      "archive",
      "settings"
    ],
    "related": [
      "How do you preserve commit history during archiving?",
      "How do you handle old or inactive GitHub projects?"
    ]
  },
  {
    "question": "How do you modify the author of a commit?",
    "answer": "Use `git commit --amend --author=\"Name <email@example.com>\"` for the most recent commit. For older commits, use interactive rebase: `git rebase -i`, then `edit` the commit and change the author.",
    "tags": [
      "git",
      "commit",
      "author",
      "rebase"
    ],
    "related": [
      "How do you rewrite commit history using git rebase?",
      "How do you change your Git configuration identity?"
    ]
  },
  {
    "question": "How do you delete sensitive information from Git history?",
    "answer": "Use `git filter-repo` or `BFG Repo-Cleaner` to permanently remove files or secrets from Git history. After cleaning, force push and notify collaborators to re-clone.",
    "tags": [
      "git",
      "security",
      "cleanup",
      "filter-repo"
    ],
    "related": [
      "How do you conduct a repository security audit?",
      "How do you rewrite commit history using git rebase?"
    ]
  },
  {
    "question": "What is the purpose of the git reflog command, and how can it help recover lost commits?",
    "answer": "`git reflog` shows a log of where HEAD and branch references have pointed. It's useful for recovering commits even after a reset or force-push, as long as the garbage collector hasn\u2019t removed them.",
    "tags": [
      "git",
      "reflog",
      "recovery",
      "history"
    ],
    "related": [
      "How do you recover from an accidental force push?",
      "How do you undo a destructive rebase?"
    ]
  },
  {
    "question": "How do you rewrite commit messages using git filter-branch?",
    "answer": "`git filter-branch --msg-filter` lets you rewrite commit messages across history. It's now deprecated in favor of `git filter-repo`, which is safer and faster for rewriting large histories.",
    "tags": [
      "git",
      "commit",
      "filter-branch",
      "history"
    ],
    "related": [
      "How do you delete sensitive information from Git history?",
      "How do you rewrite commit history using git rebase?"
    ]
  },
  {
    "question": "How do you rename a branch both locally and on the remote?",
    "answer": "Use `git branch -m <new-name>` locally, then `git push origin -u <new-name>` and delete the old remote branch using `git push origin --delete <old-name>`.",
    "tags": [
      "git",
      "branch",
      "rename",
      "remote"
    ],
    "related": [
      "How do you delete a branch in Git?",
      "How do you set up a new branch from an existing one?"
    ]
  },
  {
    "question": "What is the GitHub REST API, and how do you use it?",
    "answer": "The GitHub REST API allows interaction with GitHub programmatically to create issues, manage repos, trigger workflows, etc. Use `curl` or libraries like `octokit` to send HTTP requests to `https://api.github.com`.",
    "tags": [
      "github",
      "api",
      "rest",
      "automation"
    ],
    "related": [
      "What is the difference between GitHub REST and GraphQL APIs?",
      "How do you authenticate API requests with a token?"
    ]
  },
  {
    "question": "How do you authenticate API requests with a personal access token?",
    "answer": "Include your token in the HTTP header: `Authorization: token <your_token>`. Make sure your token has the right scopes for the operation you're performing.",
    "tags": [
      "github",
      "api",
      "authentication",
      "token"
    ],
    "related": [
      "How do you manage personal access tokens for GitHub?",
      "How do you rotate API tokens securely?"
    ]
  },
  {
    "question": "How do you create automated workflows using GitHub's API?",
    "answer": "You can trigger workflows by pushing to branches, creating pull requests, or manually invoking them using the GitHub API with `POST /repos/:owner/:repo/actions/workflows/:id/dispatches`.",
    "tags": [
      "github",
      "api",
      "actions",
      "automation"
    ],
    "related": [
      "How do you trigger GitHub Actions workflows with external events?",
      "What are reusable workflows in GitHub Actions?"
    ]
  },
  {
    "question": "How do you retrieve contributor statistics from a repository using the API?",
    "answer": "Use the GitHub REST API endpoint `GET /repos/:owner/:repo/stats/contributors` to get contributor data like commit counts, additions, and deletions.",
    "tags": [
      "github",
      "api",
      "contributors",
      "analytics"
    ],
    "related": [
      "How do you use GitHub Insights to analyze contributions?",
      "How do you visualize GitHub activity with dashboards?"
    ]
  },
  {
    "question": "How do you troubleshoot rate-limit issues in API requests?",
    "answer": "Check the `X-RateLimit-Remaining` and `Retry-After` headers in the API response. Authenticate your requests and avoid polling too frequently. For high-traffic apps, request GitHub API rate-limit increases.",
    "tags": [
      "github",
      "api",
      "rate-limit",
      "debugging"
    ],
    "related": [
      "How do you authenticate API requests with a personal access token?",
      "How do you manage GitHub API usage in CI/CD?"
    ]
  },
  {
    "question": "How do you resolve issues when git push overwrites unintended changes?",
    "answer": "Check reflog with `git reflog` to identify a safe commit, then reset your branch using `git reset --hard <safe_commit>`. Communicate with your team before force-pushing corrections.",
    "tags": [
      "git",
      "push",
      "recovery",
      "reflog"
    ],
    "related": [
      "How do you recover from an accidental force push?",
      "How do you resolve conflicting changes during push?"
    ]
  },
  {
    "question": "How do you recover from losing your SSH key used for GitHub authentication?",
    "answer": "Generate a new SSH key using `ssh-keygen`, then upload the new public key to your GitHub account. If you still have access via HTTPS or another key, remove the lost one for security.",
    "tags": [
      "github",
      "ssh",
      "security",
      "authentication"
    ],
    "related": [
      "How do you set up SSH keys for GitHub?",
      "How do you rotate access keys in GitHub workflows?"
    ]
  },
  {
    "question": "How do you fix errors caused by large binary files in your repository?",
    "answer": "Use Git Large File Storage (LFS) to manage large binaries. Track files using `git lfs track '*.psd'` and commit changes. LFS stores file pointers in Git while keeping binaries outside the repo.",
    "tags": [
      "git",
      "binary",
      "lfs",
      "performance"
    ],
    "related": [
      "What is Git LFS and how does it work?",
      "How do you manage large datasets in Git?"
    ]
  },
  {
    "question": "How do you track down a bug introduced in a specific commit using Git blame?",
    "answer": "Use `git blame <file>` to see which commit last modified each line. Once identified, use `git show <commit>` or `git log -p` to inspect the changes and find the bug.",
    "tags": [
      "git",
      "blame",
      "debugging",
      "bugs"
    ],
    "related": [
      "How do you use git bisect to identify regressions?",
      "How do you track changes to a specific line of code?"
    ]
  },
  {
    "question": "What steps can you take when a GitHub repository becomes unexpectedly private?",
    "answer": "First, check the repository settings and organization permissions. If you\u2019re not the owner, contact the admin to confirm if the change was intentional. Review audit logs (if using GitHub Enterprise) for any visibility change actions.",
    "tags": [
      "github",
      "repository",
      "visibility",
      "permissions"
    ],
    "related": [
      "How do you manage repository access controls?",
      "How do you make a GitHub repo public or private?"
    ]
  },
  {
    "question": "How do you manage repositories for a large team using GitHub Enterprise?",
    "answer": "Use organizations to group projects, create teams for access control, set branch protection rules, enable SAML/SSO for secure access, and track activity with GitHub Enterprise Insights.",
    "tags": [
      "github",
      "enterprise",
      "team",
      "repository",
      "management"
    ],
    "related": [
      "How do you enforce user-level access controls in GitHub Enterprise?",
      "How do you use GitHub Enterprise Insights for audit trails?"
    ]
  },
  {
    "question": "What is the difference between GitHub Enterprise Server and Cloud?",
    "answer": "GitHub Enterprise Cloud is hosted by GitHub, offering managed infrastructure. GitHub Enterprise Server is a self-hosted version for private data centers with full admin control.",
    "tags": [
      "github",
      "enterprise",
      "server",
      "cloud",
      "infrastructure"
    ],
    "related": [
      "How do you manage repositories for a large team using GitHub Enterprise?",
      "How do you configure GitHub for compliance workflows?"
    ]
  },
  {
    "question": "How do you set up role-based access control in GitHub Enterprise?",
    "answer": "Use GitHub Teams to manage roles. Grant repository access based on least privilege. Define team roles like Admin, Write, or Read under organization settings.",
    "tags": [
      "github",
      "enterprise",
      "roles",
      "access-control"
    ],
    "related": [
      "How do you enforce user-level access controls in GitHub Enterprise?",
      "How do you manage permissions for teams in a GitHub organization?"
    ]
  },
  {
    "question": "How do you monitor repository activity with GitHub Enterprise insights?",
    "answer": "Use GitHub Enterprise Insights dashboards to view PRs, commits, contributions, and workflow activity. Export data for custom reporting or compliance tracking.",
    "tags": [
      "github",
      "enterprise",
      "insights",
      "analytics"
    ],
    "related": [
      "How do you track contribution patterns using GitHub Insights?",
      "How do you audit repository changes in GitHub?"
    ]
  },
  {
    "question": "How do you enforce repository policies in GitHub Enterprise?",
    "answer": "Define policies such as required reviews, status checks, no-force-pushes, and signed commits under organization > repo settings. Use CODEOWNERS and pre-receive hooks for automation.",
    "tags": [
      "github",
      "enterprise",
      "policy",
      "enforcement"
    ],
    "related": [
      "How do you use server-side Git hooks to enforce policies?",
      "How do you enable branch protection rules?"
    ]
  },
  {
    "question": "How do you debug commit issues using git log --graph?",
    "answer": "`git log --graph --oneline --all` visualizes commit history as a branching tree. It helps you detect merges, rebases, or orphan commits that might be affecting history or workflow.",
    "tags": [
      "git",
      "log",
      "debugging",
      "history"
    ],
    "related": [
      "How do you trace commit ancestry in Git?",
      "How do you identify branching conflicts?"
    ]
  },
  {
    "question": "How do you locate the source of changes in a file using git blame?",
    "answer": "Run `git blame <file>` to see who last edited each line. Combine with `git log` to investigate when and why the change occurred. For specific lines, use `git log -L`.",
    "tags": [
      "git",
      "blame",
      "file-history",
      "debugging"
    ],
    "related": [
      "How do you track down a bug introduced in a specific commit?",
      "How do you use git bisect to debug changes?"
    ]
  },
  {
    "question": "How do you debug repository corruption errors?",
    "answer": "Run `git fsck` to find missing objects or corrupted data. If necessary, re-clone the repository or restore from backup. Also check for disk failures or interrupted operations.",
    "tags": [
      "git",
      "corruption",
      "debugging",
      "recovery"
    ],
    "related": [
      "How do you recover repository data after an interrupted garbage collection?",
      "How do you diagnose errors in refs or packfiles?"
    ]
  },
  {
    "question": "How do you resolve conflicts between git stash and branch changes?",
    "answer": "Apply your stash using `git stash apply`. If there\u2019s a conflict, resolve it like a normal merge conflict. After resolving, use `git add` and `git stash drop` to discard the stash.",
    "tags": [
      "git",
      "stash",
      "conflict",
      "merge"
    ],
    "related": [
      "How do you resolve merge conflicts in Git?",
      "What is git stash used for?"
    ]
  },
  {
    "question": "How do you debug Git performance issues in a large repository?",
    "answer": "Use `git status --ignored`, `git count-objects -v`, and `git gc` to evaluate performance. Avoid large binary files or deep folder structures. Consider Git LFS and sparse-checkout.",
    "tags": [
      "git",
      "performance",
      "debugging",
      "large-repos"
    ],
    "related": [
      "How do you optimize Git for large repositories?",
      "What causes Git to slow down on big projects?"
    ]
  },
  {
    "question": "How do you coordinate multiple developers working on the same branch?",
    "answer": "Use feature branches, pull requests, and frequent pushes to avoid conflicts. Establish communication and CI/CD checks to ensure smooth collaboration.",
    "tags": [
      "git",
      "collaboration",
      "branching",
      "workflow"
    ],
    "related": [
      "How do you avoid merge conflicts in a team?",
      "How do you enforce code quality checks in Git?"
    ]
  },
  {
    "question": "What strategies can you use to avoid merge conflicts in team workflows?",
    "answer": "Use smaller, focused branches, rebase frequently, avoid long-lived branches, and communicate regularly. CI checks and pull request reviews help catch issues early.",
    "tags": [
      "git",
      "merge",
      "conflict",
      "team"
    ],
    "related": [
      "How do you coordinate multiple developers working on the same branch?",
      "How do you resolve merge conflicts in Git?"
    ]
  },
  {
    "question": "How do you enforce code quality checks in collaborative repositories?",
    "answer": "Set up automated linters, tests, and CI pipelines (e.g., GitHub Actions). Enforce passing checks before merge with branch protection rules.",
    "tags": [
      "git",
      "github",
      "quality",
      "ci"
    ],
    "related": [
      "How do you integrate GitHub Actions for automated testing?",
      "How do you use pre-commit hooks for linting?"
    ]
  },
  {
    "question": "How do you implement branch protection rules on GitHub?",
    "answer": "Go to Settings > Branches > Add Rule. Enforce rules like required reviews, status checks, and no-force pushes. This protects your main development branches.",
    "tags": [
      "github",
      "branch",
      "protection",
      "security"
    ],
    "related": [
      "How do you restrict branch access on GitHub?",
      "How do you enforce repository policies in GitHub Enterprise?"
    ]
  },
  {
    "question": "How do you set up a team workflow with feature branches?",
    "answer": "Each developer works on their own feature branch. These are merged into the main branch via pull requests. This approach ensures isolation and clean review processes.",
    "tags": [
      "git",
      "workflow",
      "feature-branch",
      "team"
    ],
    "related": [
      "How do you coordinate developers on the same branch?",
      "What is a GitFlow workflow?"
    ]
  },
  {
    "question": "How does the git fsck command help detect repository issues?",
    "answer": "`git fsck` scans for corrupted objects, missing trees, and other structural problems. It\u2019s useful when you suspect low-level Git repository damage or corruption.",
    "tags": [
      "git",
      "fsck",
      "debugging",
      "corruption"
    ],
    "related": [
      "How do you fix repository corruption errors?",
      "How do you recover from interrupted Git operations?"
    ]
  },
  {
    "question": "How do you use the git rev-parse command to parse Git references?",
    "answer": "`git rev-parse` converts branch names or other references into commit hashes. It\u2019s often used in scripts or advanced Git plumbing tasks.",
    "tags": [
      "git",
      "rev-parse",
      "references",
      "advanced"
    ],
    "related": [
      "How do you inspect HEAD and branch pointers in Git?",
      "How do you debug commit chain anomalies?"
    ]
  },
  {
    "question": "What is git repack, and when should it be used?",
    "answer": "`git repack` compresses loose objects into a single packfile. This reduces repository size and improves performance, especially after many small changes.",
    "tags": [
      "git",
      "repack",
      "packfile",
      "optimization"
    ],
    "related": [
      "What is Git garbage collection?",
      "How do you manage storage in large repositories?"
    ]
  },
  {
    "question": "How do you use git worktree list to manage multiple worktrees?",
    "answer": "`git worktree list` shows all linked worktree paths, their branches, and HEADs. Use it to verify active or stale worktrees for cleanup or switching contexts.",
    "tags": [
      "git",
      "worktree",
      "list",
      "management"
    ],
    "related": [
      "What is a Git worktree and how do you use it?",
      "How do you prune old worktrees in Git?"
    ]
  },
  {
    "question": "How does the git diff --stat option improve visibility into changes?",
    "answer": "`git diff --stat` summarizes file changes by showing how many lines were added or deleted in each file. It\u2019s helpful for code review or understanding overall change impact without diving into line-by-line diffs.",
    "tags": [
      "git",
      "diff",
      "review",
      "productivity"
    ],
    "related": [
      "How do you visualize changes in Git?",
      "How do you analyze change size before committing?"
    ]
  },
  {
    "question": "How do you integrate GitHub Actions into a continuous deployment pipeline?",
    "answer": "Set up a `.github/workflows/deploy.yml` file with steps to build, test, and deploy code. Use secrets for credentials and deploy triggers like `on: push` to main branches. You can connect with cloud platforms like AWS, Azure, or Heroku.",
    "tags": [
      "github",
      "actions",
      "ci/cd",
      "deployment"
    ],
    "related": [
      "How do you deploy code changes to cloud platforms using GitHub Actions?",
      "How do you automate testing for pull requests?"
    ]
  },
  {
    "question": "How do you set up automated testing for pull requests using GitHub Actions?",
    "answer": "Create a GitHub Actions workflow triggered on `pull_request`. Add steps to install dependencies and run tests. Configure status checks in branch protection rules to enforce test success before merging.",
    "tags": [
      "github",
      "actions",
      "testing",
      "ci"
    ],
    "related": [
      "How do you integrate GitHub Actions into a CI/CD pipeline?",
      "How do you enforce branch protection rules on GitHub?"
    ]
  },
  {
    "question": "How do you deploy code changes to cloud platforms using GitHub Actions?",
    "answer": "Use GitHub Actions with deployment steps for your cloud platform. For example, use `aws-actions/configure-aws-credentials` for AWS, `azure/webapps-deploy` for Azure, or `heroku/actions` for Heroku. Secure secrets using GitHub\u2019s encrypted secrets feature.",
    "tags": [
      "github",
      "deployment",
      "cloud",
      "actions"
    ],
    "related": [
      "How do you integrate GitHub Actions into a continuous deployment pipeline?",
      "How do you secure secrets used in GitHub Actions workflows?"
    ]
  },
  {
    "question": "How do you secure secrets used in GitHub Actions workflows?",
    "answer": "Store secrets in GitHub repo settings under Settings > Secrets and use them in workflows as `${{ secrets.SECRET_NAME }}`. Never hardcode secrets into workflows or source files.",
    "tags": [
      "github",
      "security",
      "actions",
      "secrets"
    ],
    "related": [
      "How do you automate CI/CD securely?",
      "How do you rotate secrets in GitHub?"
    ]
  },
  {
    "question": "How do you troubleshoot build failures in CI/CD pipelines?",
    "answer": "Check the Actions log output to locate the failure step. Validate environment setup, dependencies, permissions, and syntax. Use debugging tools like `ACTIONS_STEP_DEBUG` and rerun workflows with added logging.",
    "tags": [
      "github",
      "actions",
      "ci/cd",
      "debugging"
    ],
    "related": [
      "How do you use logs to debug GitHub Actions?",
      "How do you enforce stable builds?"
    ]
  },
  {
    "question": "How do you archive an old repository while preserving its history?",
    "answer": "Archive the repository in GitHub under Settings > Danger Zone. This makes it read-only. The commit history and code are still accessible but no changes can be made unless unarchived.",
    "tags": [
      "github",
      "repository",
      "archive",
      "history"
    ],
    "related": [
      "How do you export GitHub repositories for offline access?",
      "How do you make GitHub repositories read-only?"
    ]
  },
  {
    "question": "How do you split a large repository into multiple smaller repositories?",
    "answer": "Use `git filter-repo` to extract specific folders or modules, preserving their commit history. Then push them to new remote repositories. This is useful for modularizing monoliths.",
    "tags": [
      "git",
      "monorepo",
      "split",
      "modularization"
    ],
    "related": [
      "How do you version multiple repositories together?",
      "How do you manage shared code across repositories?"
    ]
  },
  {
    "question": "What is the best way to manage mono-repositories in Git?",
    "answer": "Use directory structure to separate projects, enforce consistent workflows with scripts or GitHub Actions, and apply sparse-checkout or subtree split strategies for scaling.",
    "tags": [
      "git",
      "monorepo",
      "structure",
      "workflow"
    ],
    "related": [
      "How do you split a mono-repository into micro-repositories?",
      "How do you optimize CI/CD in monorepos?"
    ]
  },
  {
    "question": "How do you migrate repositories from other version control systems to Git?",
    "answer": "Tools like `git svn`, `git-tfs`, or third-party utilities convert history and branches. Carefully review history and branches before finalizing the migration and reinitialize as a Git repo.",
    "tags": [
      "git",
      "migration",
      "svn",
      "tfs"
    ],
    "related": [
      "How do you maintain history during repository migration?",
      "How do you convert legacy systems to Git?"
    ]
  },
  {
    "question": "How do you enforce repository naming conventions in GitHub?",
    "answer": "Use internal documentation or GitHub Apps/bots to validate repository names on creation. GitHub itself doesn't enforce naming patterns, so organizations often use automated scripts or manual review.",
    "tags": [
      "github",
      "repository",
      "naming",
      "automation"
    ],
    "related": [
      "How do you manage repository policies in GitHub Enterprise?",
      "How do you automate validations with GitHub Apps?"
    ]
  },
  {
    "question": "How does Git handle file hashing with SHA-1?",
    "answer": "Git creates a SHA-1 hash for each object (blobs, trees, commits) based on its contents. This ensures data integrity and enables deduplication in the object database.",
    "tags": [
      "git",
      "sha1",
      "internals",
      "security"
    ],
    "related": [
      "How does Git ensure object integrity?",
      "What is the structure of Git objects?"
    ]
  },
  {
    "question": "What is a Git packfile, and how does it optimize storage?",
    "answer": "A packfile compresses multiple Git objects into a single file to save disk space and improve transfer speed. Git generates packfiles during operations like cloning and `git gc`.",
    "tags": [
      "git",
      "packfile",
      "storage",
      "performance"
    ],
    "related": [
      "What is Git garbage collection?",
      "How do you analyze Git storage?"
    ]
  },
  {
    "question": "How does Git use delta encoding for efficient storage?",
    "answer": "Git stores differences (deltas) between objects in packfiles, reducing redundancy. Instead of storing multiple versions of similar files, Git stores changes, minimizing storage usage.",
    "tags": [
      "git",
      "delta",
      "storage",
      "compression"
    ],
    "related": [
      "What is the role of packfiles in Git?",
      "How does Git object deduplication work?"
    ]
  },
  {
    "question": "How do you inspect and modify Git objects using git cat-file?",
    "answer": "Use `git cat-file -p <object>` to view an object (commit, tree, blob). Use `-t` to get its type. This is useful for low-level inspection and understanding Git internals.",
    "tags": [
      "git",
      "cat-file",
      "objects",
      "internals"
    ],
    "related": [
      "How do you inspect Git's object database?",
      "How do you explore Git's internals?"
    ]
  },
  {
    "question": "What is the purpose of the index file in the .git folder?",
    "answer": "The index (or staging area) tracks changes to be committed. It contains paths, object hashes, and modes. Git uses it to assemble the next commit from staged content.",
    "tags": [
      "git",
      "index",
      "staging",
      "commit"
    ],
    "related": [
      "How do you stage changes before committing?",
      "What is the difference between working directory and index?"
    ]
  },
  {
    "question": "How do you automate release notes for GitHub Releases?",
    "answer": "Use GitHub Actions or CLI tools to auto-generate release notes from commit messages, PR titles, or changelogs. Tools like `release-drafter` help format and categorize changes.",
    "tags": [
      "github",
      "release",
      "automation",
      "changelog"
    ],
    "related": [
      "How do you automate tagging and releasing versions?",
      "How do you use GitHub CLI for releases?"
    ]
  },
  {
    "question": "What is the difference between pre-release and official release on GitHub?",
    "answer": "Pre-releases are marked as drafts for testing and not shown as the latest release. Official releases are stable and marked as the latest version. You choose the status during creation.",
    "tags": [
      "github",
      "release",
      "versions",
      "stability"
    ],
    "related": [
      "How do you manage pre-release testing in CI?",
      "How do you promote a GitHub release to production?"
    ]
  },
  {
    "question": "How do you roll back changes from a GitHub release?",
    "answer": "Checkout the previous release tag using `git checkout tags/<tag>` and create a hotfix branch or a new release. You may also delete the faulty release and re-tag if necessary.",
    "tags": [
      "github",
      "release",
      "rollback",
      "tags"
    ],
    "related": [
      "How do you recover from broken production deployments?",
      "How do you use Git tags for versioning?"
    ]
  },
  {
    "question": "How do you link GitHub releases with CI/CD workflows?",
    "answer": "Trigger workflows on release events (`on: release`). Use `if: github.event.release.prerelease == false` for stable builds. Deploy artifacts or publish packages on every release.",
    "tags": [
      "github",
      "ci/cd",
      "release",
      "workflow"
    ],
    "related": [
      "How do you automate GitHub Releases?",
      "How do you trigger workflows on tags or versions?"
    ]
  },
  {
    "question": "How do you use semantic versioning for GitHub releases?",
    "answer": "Semantic Versioning (SemVer) uses the format MAJOR.MINOR.PATCH. Update the MAJOR version for breaking changes, MINOR for new features, and PATCH for bug fixes. Use Git tags like `v1.2.3` in your GitHub releases and enforce consistent naming via automation.",
    "tags": [
      "github",
      "release",
      "versioning",
      "semver"
    ],
    "related": [
      "How do you link GitHub releases with CI/CD workflows?",
      "How do you automate tagging and releasing versions?"
    ]
  },
  {
    "question": "How do you resolve conflicts in binary files?",
    "answer": "Git cannot merge binary files automatically. You must resolve these conflicts manually by opening each version in a suitable editor, choosing the correct version, then adding and committing the result.",
    "tags": [
      "git",
      "conflict",
      "binary",
      "merge"
    ],
    "related": [
      "How do you resolve merge conflicts in Git?",
      "How do you manage large binary files with Git LFS?"
    ]
  },
  {
    "question": "What strategies can you use for minimizing merge conflicts in distributed teams?",
    "answer": "Use short-lived branches, clear code ownership, and smaller pull requests. Encourage frequent integration with main, use CI for validation, and enable pre-merge checks and linters.",
    "tags": [
      "git",
      "collaboration",
      "merge",
      "workflow"
    ],
    "related": [
      "How do you avoid merge conflicts in team workflows?",
      "How do you enforce code quality in pull requests?"
    ]
  },
  {
    "question": "How do you resolve conflicts with a .gitignore file?",
    "answer": "Conflicts in `.gitignore` files should be resolved like text file conflicts. Edit the file to remove conflict markers, decide which rules to keep, and commit the resolved file.",
    "tags": [
      "git",
      "conflict",
      "gitignore"
    ],
    "related": [
      "How do you fix merge conflicts in Git?",
      "How do you handle repository-specific ignore rules?"
    ]
  },
  {
    "question": "How do you use git rerere to manage repeated conflict resolutions?",
    "answer": "`git rerere` remembers how you resolved past conflicts and re-applies those resolutions automatically. Enable it using `git config --global rerere.enabled true`.",
    "tags": [
      "git",
      "conflict",
      "rerere",
      "automation"
    ],
    "related": [
      "How do you resolve recurring merge conflicts?",
      "How do you simplify manual merge workflows?"
    ]
  },
  {
    "question": "What is the impact of merge conflicts on automated workflows, and how can they be managed?",
    "answer": "Merge conflicts can block CI/CD pipelines, especially when using GitHub Actions triggered by pull requests. Manage them by using rebase strategies, pre-merge tests, and automating conflict detection using bots or hooks.",
    "tags": [
      "git",
      "ci",
      "merge",
      "conflict",
      "workflow"
    ],
    "related": [
      "How do you prevent merge conflicts in CI/CD?",
      "How do you rebase branches before merging?"
    ]
  },
  {
    "question": "How do you analyze contribution trends on GitHub repositories?",
    "answer": "Use GitHub Insights to view graphs on commits, issues, pull requests, and contributors over time. For deeper analysis, export data using the GitHub API or use third-party tools like Orbit or GitHub Archive.",
    "tags": [
      "github",
      "insights",
      "contributions",
      "analytics"
    ],
    "related": [
      "How do you use GitHub Insights to monitor team productivity?",
      "How do you visualize contributor statistics?"
    ]
  },
  {
    "question": "What metrics can you track using GitHub Insights?",
    "answer": "GitHub Insights provides metrics like commit frequency, issue resolution time, PR review time, contributor counts, and code frequency. These help assess activity and collaboration health.",
    "tags": [
      "github",
      "insights",
      "metrics",
      "analytics"
    ],
    "related": [
      "How do you create dashboards for GitHub repository metrics?",
      "How do you track code churn with GitHub?"
    ]
  },
  {
    "question": "How do you identify inactive contributors in a GitHub repository?",
    "answer": "Check the Contributors graph under GitHub Insights or use `GET /repos/:owner/:repo/stats/contributors` via API. Look for contributors with no activity over a time range.",
    "tags": [
      "github",
      "contributors",
      "activity",
      "insights"
    ],
    "related": [
      "How do you manage inactive repositories?",
      "How do you track engagement in open-source projects?"
    ]
  },
  {
    "question": "How do you compare repository analytics across multiple GitHub projects?",
    "answer": "Use GitHub\u2019s organization-level Insights or APIs to extract data for multiple repos. Tools like GitHub CLI, `gh api`, or third-party dashboards (e.g., Grafana, Orbit) can help aggregate and visualize trends.",
    "tags": [
      "github",
      "analytics",
      "insights",
      "organization"
    ],
    "related": [
      "How do you track productivity across teams?",
      "How do you export GitHub Insights data for analysis?"
    ]
  },
  {
    "question": "How do you export GitHub Insights data for external analysis?",
    "answer": "Use the GitHub REST API or GraphQL to pull data on commits, issues, and PRs. Export to CSV or JSON for visualization in external tools like Excel, Tableau, or Power BI.",
    "tags": [
      "github",
      "insights",
      "export",
      "data-analysis"
    ],
    "related": [
      "How do you analyze contribution trends?",
      "How do you use the GitHub API for analytics?"
    ]
  },
  {
    "question": "How do you stage parts of a file instead of the entire file?",
    "answer": "Use `git add -p` to interactively choose which changes to stage. Git presents each hunk and lets you accept, edit, or skip it. Great for clean commit separation.",
    "tags": [
      "git",
      "staging",
      "partial",
      "add"
    ],
    "related": [
      "How do you split a commit into multiple?",
      "How do you use git diff for staged changes?"
    ]
  },
  {
    "question": "How do you create a custom diff tool for Git?",
    "answer": "Configure a custom diff tool using `git config --global diff.tool <tool>` and define its behavior with `difftool.<tool>.cmd`. Useful for visual comparisons of changes in files.",
    "tags": [
      "git",
      "diff",
      "tool",
      "config"
    ],
    "related": [
      "How do you use GUI tools with Git?",
      "How do you customize merge conflict resolution?"
    ]
  },
  {
    "question": "What is the purpose of git verify-pack, and when should you use it?",
    "answer": "`git verify-pack` checks the integrity of packfiles. It's mainly used for debugging or validating Git's internal storage. Use with `git verify-pack -v .git/objects/pack/pack-xxxx.idx`.",
    "tags": [
      "git",
      "packfile",
      "debug",
      "storage"
    ],
    "related": [
      "What is a Git packfile?",
      "How do you optimize Git storage for large repos?"
    ]
  },
  {
    "question": "How do you configure sparse checkouts for specific subdirectories?",
    "answer": "Enable sparse checkout with `git sparse-checkout init`, then specify the folders to include using `git sparse-checkout set <folder>`. Useful for working in monorepos without checking out the full codebase.",
    "tags": [
      "git",
      "sparse-checkout",
      "monorepo",
      "performance"
    ],
    "related": [
      "How do you work with large repositories?",
      "What is the difference between sparse and shallow clones?"
    ]
  },
  {
    "question": "How do you use git show to retrieve detailed commit information?",
    "answer": "Use `git show <commit>` to display the commit message, author, and diff. Add options like `--stat` or `--name-only` to customize output. Useful for reviewing specific changes.",
    "tags": [
      "git",
      "show",
      "commit",
      "history"
    ],
    "related": [
      "How do you inspect a commit in detail?",
      "How do you compare changes between commits?"
    ]
  },
  {
    "question": "How do you enforce commit message standards across a team using Git hooks?",
    "answer": "Create a `commit-msg` hook in `.git/hooks` that checks message format using regex or tools like `commitlint`. Share the hook via repository templates or setup scripts.",
    "tags": [
      "git",
      "hooks",
      "commit",
      "team"
    ],
    "related": [
      "How do you use Git hooks for automation?",
      "How do you standardize commit history?"
    ]
  },
  {
    "question": "What is the purpose of branch protection rules, and how do they enhance collaboration?",
    "answer": "Branch protection rules prevent changes to important branches without review, status checks, or signed commits. They reduce errors, enforce policies, and ensure code quality in teams.",
    "tags": [
      "github",
      "branch",
      "protection",
      "collaboration"
    ],
    "related": [
      "How do you restrict access to branches in GitHub?",
      "How do you automate status checks for branches?"
    ]
  },
  {
    "question": "How do you manage large-scale code reviews for enterprise-level repositories?",
    "answer": "Use pull request templates, assign reviewers via CODEOWNERS, set review requirements, and break PRs into smaller logical chunks. Use bots or labels to automate triage and enforcement.",
    "tags": [
      "github",
      "review",
      "enterprise",
      "scale"
    ],
    "related": [
      "How do you automate pull request reviews?",
      "How do you manage CODEOWNERS for large projects?"
    ]
  },
  {
    "question": "How do you implement an approval workflow for pull requests?",
    "answer": "Use GitHub\u2019s branch protection rules to require at least one or multiple reviewers. Use teams, assign CODEOWNERS, and automate tagging with bots to manage approval chains.",
    "tags": [
      "github",
      "pull-request",
      "workflow",
      "approval"
    ],
    "related": [
      "How do you enforce review policies in GitHub?",
      "How do you automate pull request management?"
    ]
  },
  {
    "question": "How can GitHub's 'suggested changes' feature improve collaboration?",
    "answer": "When reviewing a pull request, reviewers can use 'suggested changes' to propose direct line edits. The author can accept and commit them instantly, reducing back-and-forth and making collaboration faster and more precise.",
    "tags": [
      "github",
      "collaboration",
      "review",
      "pull-request"
    ],
    "related": [
      "How do you manage code reviews in GitHub?",
      "How do you implement approval workflows in PRs?"
    ]
  },
  {
    "question": "How do you scan a repository for sensitive information using GitHub Advanced Security?",
    "answer": "Enable secret scanning under the repository's Security tab. GitHub will automatically look for hardcoded credentials, tokens, and keys in pushes and alert maintainers upon detection.",
    "tags": [
      "github",
      "security",
      "advanced-security",
      "secrets"
    ],
    "related": [
      "How do you conduct a security audit in GitHub?",
      "What is Dependabot and how does it help security?"
    ]
  },
  {
    "question": "What is Dependabot, and how does it help secure repositories?",
    "answer": "Dependabot monitors your dependency files and opens pull requests when security updates are available. It helps prevent vulnerabilities from outdated packages in supported ecosystems like npm, pip, Maven, and more.",
    "tags": [
      "github",
      "security",
      "dependabot",
      "dependencies"
    ],
    "related": [
      "How do you configure security alerts for GitHub?",
      "How do you manage dependencies in GitHub repositories?"
    ]
  },
  {
    "question": "How do you configure security alerts for vulnerable dependencies?",
    "answer": "Enable Dependabot alerts under Settings > Security & analysis. GitHub will notify you of vulnerable dependencies. You can also configure automated updates using Dependabot security updates.",
    "tags": [
      "github",
      "security",
      "alerts",
      "vulnerabilities"
    ],
    "related": [
      "How do you use Dependabot for security updates?",
      "How do you scan for malware in GitHub repositories?"
    ]
  },
  {
    "question": "What is the role of code scanning in GitHub repositories?",
    "answer": "Code scanning checks your codebase for vulnerabilities, logic errors, or insecure coding patterns. GitHub integrates with CodeQL or third-party scanners to scan every push, PR, or scheduled job.",
    "tags": [
      "github",
      "security",
      "code-scanning",
      "ci"
    ],
    "related": [
      "How do you integrate security checks in GitHub Actions?",
      "How do you automate code audits using GitHub?"
    ]
  },
  {
    "question": "How do you set up automated security checks for pull requests?",
    "answer": "Integrate code scanning in your GitHub Actions workflow using CodeQL or third-party tools like SonarCloud. Configure it to run on pull requests and block merges when issues are detected.",
    "tags": [
      "github",
      "security",
      "pull-request",
      "ci/cd"
    ],
    "related": [
      "What is the role of code scanning in GitHub?",
      "How do you enforce secure workflows in PRs?"
    ]
  },
  {
    "question": "What are some strategies for improving git clone performance on large repositories?",
    "answer": "Use shallow clones with `--depth 1`, narrow the scope with sparse checkout or a specific branch using `--single-branch`, and reduce LFS content. Also, optimize repo size using Git GC and splitting.",
    "tags": [
      "git",
      "performance",
      "clone",
      "large-repo"
    ],
    "related": [
      "How do you optimize fetch and pull in large repositories?",
      "How do you use sparse checkout in Git?"
    ]
  },
  {
    "question": "How do you manage and optimize Git repositories with large binary files?",
    "answer": "Use Git Large File Storage (LFS) to track binaries like images or media. Git LFS replaces large files with pointers in Git and stores the actual content on a separate server, improving performance.",
    "tags": [
      "git",
      "lfs",
      "binary",
      "storage"
    ],
    "related": [
      "How does Git LFS work?",
      "How do you optimize Git for large file performance?"
    ]
  },
  {
    "question": "How can shallow clones speed up repository cloning for CI/CD workflows?",
    "answer": "Shallow clones (`git clone --depth 1`) fetch only the latest commit instead of full history, reducing download time and data transfer. Ideal for build/test pipelines where history isn't needed.",
    "tags": [
      "git",
      "ci/cd",
      "clone",
      "shallow"
    ],
    "related": [
      "How do you improve performance of GitHub Actions?",
      "How do you use sparse checkouts in CI pipelines?"
    ]
  },
  {
    "question": "How do you identify and fix performance bottlenecks in Git workflows?",
    "answer": "Use `git status`, `git count-objects -v`, and `git fsck` to profile repo state. Avoid tracking large files, reduce ref counts, and clean up unused branches. Use shallow or sparse checkouts when possible.",
    "tags": [
      "git",
      "performance",
      "debug",
      "workflow"
    ],
    "related": [
      "What tools can you use to inspect Git repo health?",
      "How do you handle large history efficiently?"
    ]
  },
  {
    "question": "What role does git gc play in repository maintenance?",
    "answer": "`git gc` (garbage collection) cleans up unnecessary files, packs objects, and compresses the repo for performance. It runs automatically but can be triggered manually for immediate optimization.",
    "tags": [
      "git",
      "gc",
      "maintenance",
      "performance"
    ],
    "related": [
      "What is git repack and when should you use it?",
      "How do you manage disk space in Git?"
    ]
  },
  {
    "question": "How do you identify bottlenecks in pull request workflows using GitHub Insights?",
    "answer": "Go to GitHub Insights and check metrics like average review time, PR throughput, and open/close rates. Use this to detect delays in approvals or merges and improve review processes.",
    "tags": [
      "github",
      "insights",
      "pull-request",
      "review"
    ],
    "related": [
      "How do you optimize team workflows on GitHub?",
      "How do you monitor PR aging?"
    ]
  },
  {
    "question": "What metrics can you track to improve repository collaboration?",
    "answer": "Track PR turnaround time, issue response rates, commit frequency, review comments, and CI status passes. Use GitHub Insights or export data via the GitHub API for trend analysis.",
    "tags": [
      "github",
      "collaboration",
      "metrics",
      "insights"
    ],
    "related": [
      "How do you use GitHub Insights for team management?",
      "How do you visualize repository activity?"
    ]
  },
  {
    "question": "How do you use GitHub Insights to monitor team productivity trends?",
    "answer": "Check commit frequency, issue closing rate, and PR completion rates in Insights. Look at contributions per developer or team to assess velocity, bottlenecks, or over-dependence on individuals.",
    "tags": [
      "github",
      "insights",
      "team",
      "productivity"
    ],
    "related": [
      "What productivity metrics does GitHub provide?",
      "How do you manage active contributors efficiently?"
    ]
  },
  {
    "question": "How do you track the average resolution time for issues on GitHub?",
    "answer": "Use GitHub Insights or query with GraphQL to calculate the duration between issue creation and close. Tools like Orbit or dashboards from GitHub Enterprise can also visualize resolution times.",
    "tags": [
      "github",
      "issues",
      "metrics",
      "resolution-time"
    ],
    "related": [
      "How do you measure issue response time?",
      "How do you improve team SLA on GitHub?"
    ]
  },
  {
    "question": "What is the significance of 'code frequency' graphs in repository analytics?",
    "answer": "Code frequency graphs show lines of code added and deleted over time. It reveals coding trends, refactoring efforts, and whether the team is growing or shrinking the codebase.",
    "tags": [
      "github",
      "analytics",
      "code-frequency",
      "graphs"
    ],
    "related": [
      "How do you visualize repo changes over time?",
      "How do you detect spikes in coding activity?"
    ]
  },
  {
    "question": "How do you use git reset --hard to restore a repository to a previous state?",
    "answer": "Use `git reset --hard <commit>` to move HEAD and working directory to a specific commit. This removes any uncommitted changes. Be cautious \u2014 this command is irreversible without `git reflog`.",
    "tags": [
      "git",
      "reset",
      "recovery",
      "history"
    ],
    "related": [
      "How do you undo commits safely?",
      "How do you recover lost data using reflog?"
    ]
  },
  {
    "question": "What is the purpose of the git rev-list command?",
    "answer": "`git rev-list` lists commit hashes reachable from a ref. It's used in scripts or tooling to analyze commit ranges, count changes, or walk the commit graph programmatically.",
    "tags": [
      "git",
      "revision",
      "scripts",
      "advanced"
    ],
    "related": [
      "How do you analyze commits in a branch?",
      "How do you build Git-based automation tools?"
    ]
  },
  {
    "question": "How do you create and manage orphan branches in Git?",
    "answer": "Run `git checkout --orphan <branch>` to create a branch with no history. Useful for creating clean documentation or deployment branches. Stage and commit files from scratch.",
    "tags": [
      "git",
      "branch",
      "orphan",
      "workflow"
    ],
    "related": [
      "How do you set up GitHub Pages branches?",
      "How do you isolate content in Git?"
    ]
  },
  {
    "question": "How do you use git diff --cached to view staged changes?",
    "answer": "`git diff --cached` (or `--staged`) shows the difference between the index and the last commit \u2014 i.e., what you\u2019ve staged for the next commit. Useful before committing to review changes.",
    "tags": [
      "git",
      "diff",
      "staging",
      "index"
    ],
    "related": [
      "How do you preview a commit before it happens?",
      "How do you use git add -p effectively?"
    ]
  },
  {
    "question": "How does the git bundle command help share repositories offline?",
    "answer": "`git bundle` creates a single file containing all repository data, which can be transferred and cloned elsewhere using `git clone <bundle-file>`. It's useful for air-gapped environments or backups without remote access.",
    "tags": [
      "git",
      "offline",
      "bundle",
      "backup"
    ],
    "related": [
      "How do you share repositories without network access?",
      "How do you clone from a git bundle?"
    ]
  },
  {
    "question": "How do you retrieve a list of repositories for a specific user using the GitHub API?",
    "answer": "Send a GET request to `https://api.github.com/users/{username}/repos`. You can use optional query parameters like `type=all` or `sort=created` to filter results. Authentication increases rate limits.",
    "tags": [
      "github",
      "api",
      "repos",
      "user"
    ],
    "related": [
      "How do you authenticate GitHub API requests?",
      "How do you filter GitHub repositories using the API?"
    ]
  },
  {
    "question": "How do you automate issue creation with the GitHub API?",
    "answer": "Send a POST request to `https://api.github.com/repos/{owner}/{repo}/issues` with a JSON payload that includes `title`, `body`, `labels`, etc. Authenticate using a personal access token with repo scope.",
    "tags": [
      "github",
      "api",
      "automation",
      "issues"
    ],
    "related": [
      "How do you use GitHub REST API for project automation?",
      "How do you trigger workflows with issue creation?"
    ]
  },
  {
    "question": "What are webhooks, and how do you integrate them with external systems?",
    "answer": "Webhooks allow GitHub to notify external systems when events like push, PR, or issue updates occur. Configure them in repo settings > Webhooks, providing a payload URL and optional secret for authentication.",
    "tags": [
      "github",
      "webhooks",
      "automation",
      "integration"
    ],
    "related": [
      "How do you secure GitHub webhooks?",
      "How do you automate workflows using webhooks?"
    ]
  },
  {
    "question": "How do you monitor API rate limits in a high-traffic application?",
    "answer": "Inspect the `X-RateLimit-Limit` and `X-RateLimit-Remaining` headers in GitHub API responses. Use authenticated requests to increase limits and build logic to handle 403 or retry-after scenarios.",
    "tags": [
      "github",
      "api",
      "rate-limit",
      "monitoring"
    ],
    "related": [
      "How do you optimize GitHub API usage in CI?",
      "How do you cache GitHub API responses?"
    ]
  },
  {
    "question": "How can you use GraphQL to query data from GitHub efficiently?",
    "answer": "GitHub's GraphQL API allows querying nested data in a single request, reducing overfetching. You define the shape of the response. It\u2019s ideal for fetching related objects like PRs, commits, and authors simultaneously.",
    "tags": [
      "github",
      "graphql",
      "api",
      "optimization"
    ],
    "related": [
      "How does GraphQL compare to REST in GitHub?",
      "How do you build dashboards with GitHub GraphQL?"
    ]
  },
  {
    "question": "How do you debug issues caused by corrupted objects in a Git repository?",
    "answer": "Run `git fsck` to identify broken or missing objects. Try restoring from backup, cloning fresh, or using `git reflog` to recover known good commits. Avoid abrupt shutdowns during Git operations.",
    "tags": [
      "git",
      "corruption",
      "debug",
      "recovery"
    ],
    "related": [
      "How do you recover from an interrupted git gc?",
      "How do you inspect loose objects in Git?"
    ]
  },
  {
    "question": "How do you resolve authentication problems with SSH keys and GitHub?",
    "answer": "Check that your SSH agent is running and the key is added via `ssh-add`. Verify GitHub access with `ssh -T git@github.com`. Ensure your public key is uploaded under GitHub > Settings > SSH keys.",
    "tags": [
      "github",
      "ssh",
      "authentication",
      "troubleshooting"
    ],
    "related": [
      "How do you rotate SSH keys for GitHub?",
      "How do you set up new SSH credentials securely?"
    ]
  },
  {
    "question": "What steps can you take to recover a repository affected by force pushes?",
    "answer": "Use `git reflog` to find previous commit hashes and reset the branch to a safe state. Coordinate with teammates before re-pushing. Enforce branch protection rules to prevent future force pushes.",
    "tags": [
      "git",
      "force-push",
      "recovery",
      "reflog"
    ],
    "related": [
      "How do you undo destructive changes in Git?",
      "How do you enforce safe collaboration practices?"
    ]
  },
  {
    "question": "How do you debug problems with Git submodules?",
    "answer": "Check `.gitmodules` for path/URL accuracy, ensure you run `git submodule update --init`, and use `git submodule status`. If broken, deinit with `git submodule deinit -f` and reinit correctly.",
    "tags": [
      "git",
      "submodules",
      "debug",
      "configuration"
    ],
    "related": [
      "How do you add and update Git submodules?",
      "What are alternatives to submodules for dependency management?"
    ]
  },
  {
    "question": "How can you detect and fix file encoding issues in Git?",
    "answer": "Use `file` or `iconv` to detect encoding. Git tracks content as bytes, so mismatches can cause diffs to break. Normalize to UTF-8 and set `.gitattributes` for consistent encoding rules.",
    "tags": [
      "git",
      "encoding",
      "compatibility",
      "diff"
    ],
    "related": [
      "How do you enforce file format standards in Git?",
      "How do you resolve whitespace or CRLF issues?"
    ]
  },
  {
    "question": "How do you work with sparse index files in Git for high-performance operations?",
    "answer": "Sparse index is a newer Git feature that reduces in-memory usage for partial checkouts. Enable it with `git config core.sparseIndex true` after initializing sparse checkout. Requires newer Git versions.",
    "tags": [
      "git",
      "sparse",
      "index",
      "performance"
    ],
    "related": [
      "What is sparse checkout and how is it used?",
      "How does sparse index differ from normal index?"
    ]
  },
  {
    "question": "How does Git handle object deduplication in distributed repositories?",
    "answer": "Git stores each object once, identified by SHA-1. When fetched or pushed across remotes, duplicate objects are skipped based on hash match. This reduces storage and bandwidth use.",
    "tags": [
      "git",
      "object",
      "deduplication",
      "internals"
    ],
    "related": [
      "How does Git use SHA-1 for data integrity?",
      "How do packfiles contribute to deduplication?"
    ]
  },
  {
    "question": "How do you set up bare repositories, and what are their use cases?",
    "answer": "Use `git init --bare` to create a repo without a working directory. Ideal for centralized servers or CI systems. Developers push/pull from it, but don\u2019t edit files inside directly.",
    "tags": [
      "git",
      "bare",
      "server",
      "collaboration"
    ],
    "related": [
      "How do you use Git as a central server?",
      "What is the difference between bare and normal repositories?"
    ]
  },
  {
    "question": "How do you optimize Git packfile compression for storage efficiency?",
    "answer": "Use `git repack -a -d --depth=250 --window=250` for deep compression. Run `git gc` to prune unreachable objects. Split large histories across smaller packs if needed for performance.",
    "tags": [
      "git",
      "packfile",
      "compression",
      "optimization"
    ],
    "related": [
      "How do you manage large repositories efficiently?",
      "What is the impact of git gc on packfile sizes?"
    ]
  },
  {
    "question": "How do you enforce commit templates for all users in a Git repository?",
    "answer": "Distribute a commit template file and configure users to set it using `git config commit.template path/to/template.txt`. Enforce via pre-commit hooks or onboarding scripts in team projects.",
    "tags": [
      "git",
      "commit",
      "template",
      "standardization"
    ],
    "related": [
      "How do you use Git hooks to enforce commit standards?",
      "How do you automate onboarding for Git projects?"
    ]
  },
  {
    "question": "How does the object database in Git store content?",
    "answer": "Git stores content in `.git/objects` as blobs (files), trees (directories), commits, and tags. Each object is hashed with SHA-1 and saved as a file or packed for efficiency.",
    "tags": [
      "git",
      "object-database",
      "storage",
      "internals"
    ],
    "related": [
      "How do you inspect Git objects?",
      "What is the structure of Git object storage?"
    ]
  },
  {
    "question": "What is the significance of the 'fan-out tree' structure in Git's index file?",
    "answer": "The fan-out tree groups objects by the first two characters of their SHA-1 hash, helping Git locate files efficiently. It avoids overloading a single directory with too many files.",
    "tags": [
      "git",
      "index",
      "fan-out",
      "performance"
    ],
    "related": [
      "How does Git's object database improve performance?",
      "Why is SHA-1 used to organize Git objects?"
    ]
  },
  {
    "question": "How do you inspect loose objects in Git?",
    "answer": "Loose objects are stored as individual files under `.git/objects`. Use `git cat-file -p <hash>` to read them. They\u2019re typically created before being packed by `git gc`.",
    "tags": [
      "git",
      "loose-object",
      "inspect",
      "storage"
    ],
    "related": [
      "How do you pack objects in Git?",
      "How do you analyze Git internals?"
    ]
  },
  {
    "question": "How does Git implement delta compression in packfiles?",
    "answer": "Git stores objects as deltas against similar objects in packfiles. This reduces redundancy. When checking out files, Git applies the delta chain to reconstruct the full content.",
    "tags": [
      "git",
      "compression",
      "packfile",
      "delta"
    ],
    "related": [
      "What is the role of git repack?",
      "How does Git optimize for redundant content?"
    ]
  },
  {
    "question": "How do you integrate GitHub Issues with project management tools like Jira?",
    "answer": "Use GitHub\u2019s built-in integrations or third-party services like GitHub Marketplace apps to sync issues with Jira. For example, the GitHub + Jira app allows linking commits, branches, and PRs to Jira tickets automatically.",
    "tags": [
      "github",
      "jira",
      "integration",
      "issues"
    ],
    "related": [
      "How do you automate workflows between GitHub and external tools?",
      "How do you link GitHub pull requests with issue tracking systems?"
    ]
  },
  {
    "question": "What is the role of GitHub Milestones in tracking progress?",
    "answer": "Milestones group issues and pull requests by a goal or deadline. You can use them to track progress toward a release or sprint, with visual indicators of completion and open tasks.",
    "tags": [
      "github",
      "milestones",
      "tracking",
      "planning"
    ],
    "related": [
      "How do you manage sprints using GitHub Projects?",
      "How do you assign issues to milestones?"
    ]
  },
  {
    "question": "How do you manage repository dependencies across multiple projects in GitHub?",
    "answer": "Use Git submodules, GitHub Dependency Graph, or GitHub Actions to track and update dependencies. You can also use tools like Renovate or Dependabot to automate dependency updates.",
    "tags": [
      "github",
      "dependencies",
      "multi-repo",
      "automation"
    ],
    "related": [
      "What are Git submodules and when should you use them?",
      "How do you manage third-party packages across repositories?"
    ]
  },
  {
    "question": "How do you set custom branch naming conventions across teams on GitHub?",
    "answer": "You can define conventions using GitHub Actions, Git hooks, or bots that validate branch names on push or PR. Common formats include `feature/*`, `bugfix/*`, or `hotfix/*`.",
    "tags": [
      "github",
      "branch",
      "conventions",
      "workflow"
    ],
    "related": [
      "How do you enforce naming rules with Git hooks?",
      "How do you use pre-push validation in Git?"
    ]
  },
  {
    "question": "How do you manage concurrent workflows in large repositories using GitHub Workspaces?",
    "answer": "GitHub Workspaces let you define isolated environments for concurrent builds or tests. Use `matrix` strategies in Actions and separate paths or caches for each workspace.",
    "tags": [
      "github",
      "actions",
      "workflow",
      "concurrency"
    ],
    "related": [
      "How do you optimize parallel workflows in GitHub Actions?",
      "What is matrix strategy in CI pipelines?"
    ]
  },
  {
    "question": "How do you configure your Git environment for cross-platform development?",
    "answer": "Set `.gitattributes` for consistent line endings, enable `core.autocrlf` depending on OS, and use containerized or virtual environments to ensure consistency across macOS, Windows, and Linux.",
    "tags": [
      "git",
      "cross-platform",
      "environment",
      "configuration"
    ],
    "related": [
      "How do you manage CRLF issues in Git?",
      "How do you ensure environment consistency in teams?"
    ]
  },
  {
    "question": "How does Git handle CRLF (Carriage Return Line Feed) conversion issues in collaborative projects?",
    "answer": "Git can automatically convert line endings using `core.autocrlf`. Set it to `true` on Windows, `input` on macOS/Linux. Use `.gitattributes` to enforce consistent endings regardless of OS.",
    "tags": [
      "git",
      "crlf",
      "line-endings",
      "compatibility"
    ],
    "related": [
      "How do you fix inconsistent line endings in Git?",
      "What is the role of .gitattributes in normalization?"
    ]
  },
  {
    "question": "How do you use .mailmap to standardize contributor details in Git logs?",
    "answer": "Add a `.mailmap` file to the root of your repo to alias different author names or emails to a single canonical identity. Git uses this in `git shortlog` and contribution graphs.",
    "tags": [
      "git",
      "mailmap",
      "contributors",
      "identity"
    ],
    "related": [
      "How do you clean up Git commit history?",
      "How do you handle email variations in Git logs?"
    ]
  },
  {
    "question": "How do you manage complex submodule dependencies in Git projects?",
    "answer": "Use nested submodules with clear `.gitmodules` configuration. Regularly update submodules with `git submodule update --remote`, and use recursive cloning for deeper setups.",
    "tags": [
      "git",
      "submodules",
      "dependencies",
      "complexity"
    ],
    "related": [
      "How do you update submodules in Git?",
      "What are alternatives to Git submodules?"
    ]
  },
  {
    "question": "How do you set up conditional configuration values in Git?",
    "answer": "Use Git\u2019s conditional includes in your `.gitconfig`: `[includeIf \"gitdir:~/work/\"] path = .gitconfig-work`. This allows per-directory settings or OS-specific behavior.",
    "tags": [
      "git",
      "configuration",
      "conditional",
      "advanced"
    ],
    "related": [
      "How do you separate personal and work Git settings?",
      "What are best practices for Git config management?"
    ]
  },
  {
    "question": "How do you visualize repository commit history using third-party tools?",
    "answer": "Tools like GitKraken, Sourcetree, or GitHub Desktop provide visual commit graphs. CLI users can use `git log --graph` or `tig` for terminal-based visualization.",
    "tags": [
      "git",
      "visualization",
      "history",
      "tools"
    ],
    "related": [
      "How do you use git log --graph?",
      "What are GUI alternatives to command-line Git?"
    ]
  },
  {
    "question": "What are the advantages of using git log --graph for understanding branching structures?",
    "answer": "`git log --graph` visually represents branches and merges in the CLI. It\u2019s useful for understanding complex workflows and tracking which commits belong to which branches.",
    "tags": [
      "git",
      "log",
      "branches",
      "graph"
    ],
    "related": [
      "How do you use git log for commit history analysis?",
      "How do you debug branching issues visually?"
    ]
  },
  {
    "question": "How do you track branching complexity in large repositories using visualization plugins?",
    "answer": "Use plugins or tools like GitLens for VS Code, or GitHub Insights, to identify branch divergence, unmerged branches, and contributor patterns. Visual graphs help track branching sprawl.",
    "tags": [
      "git",
      "visualization",
      "branches",
      "complexity"
    ],
    "related": [
      "How do you identify stale or long-lived branches?",
      "How do you simplify complex Git workflows?"
    ]
  },
  {
    "question": "How do you generate custom visual diagrams for Git workflows?",
    "answer": "Use tools like Mermaid, GitGraph.js, or GitGraph in VS Code to create flowcharts or sequence diagrams that represent branching, merging, and rebasing logic. Useful for documentation.",
    "tags": [
      "git",
      "workflow",
      "visualization",
      "documentation"
    ],
    "related": [
      "How do you document Git workflows for teams?",
      "What tools can illustrate Git operations clearly?"
    ]
  },
  {
    "question": "How do you analyze commit patterns across contributors using graphs?",
    "answer": "Use `git shortlog`, GitHub Insights, or external tools like GitStats or Gource to graph contributor trends, volume, and timelines. Helps identify top contributors or bottlenecks.",
    "tags": [
      "git",
      "contributors",
      "analytics",
      "graphs"
    ],
    "related": [
      "How do you use GitHub Insights for contributor analysis?",
      "How do you visualize commit frequency over time?"
    ]
  },
  {
    "question": "How do researchers version control large datasets and scripts using Git?",
    "answer": "Researchers use Git LFS for large files and structure repos by experiment, script, and data folders. DVC (Data Version Control) is also popular for reproducible workflows with Git integration.",
    "tags": [
      "git",
      "research",
      "datasets",
      "lfs"
    ],
    "related": [
      "How do you collaborate on scientific projects using Git?",
      "What tools complement Git for research reproducibility?"
    ]
  },
  {
    "question": "How do you use GitHub to manage collaborative research across institutions?",
    "answer": "Create organizations or private repos, add collaborators with appropriate access, use Projects for task planning, and Issues for discussions. GitHub Discussions can also help foster community input.",
    "tags": [
      "github",
      "research",
      "collaboration",
      "institutions"
    ],
    "related": [
      "How do you manage permissions in cross-team GitHub projects?",
      "How do you host academic content on GitHub?"
    ]
  },
  {
    "question": "How do you leverage GitHub Pages for publishing academic papers and projects?",
    "answer": "Use GitHub Pages with Jekyll or static site builders to host research, papers, and documentation. Markdown and LaTeX support enable formatting. Link to datasets and repositories directly.",
    "tags": [
      "github",
      "pages",
      "academic",
      "documentation"
    ],
    "related": [
      "How do you automate research website deployments?",
      "How do you version documentation with Git?"
    ]
  },
  {
    "question": "How do you structure a repository for reproducible scientific experiments?",
    "answer": "Follow a standard layout: `/scripts`, `/data`, `/results`, `/docs`, and `/notebooks`. Track metadata in `README.md` or `.dvc` files, and use `requirements.txt` or environment.yml for environment reproducibility.",
    "tags": [
      "git",
      "research",
      "structure",
      "reproducibility"
    ],
    "related": [
      "How do you use Git for scientific workflows?",
      "How do you set up data pipelines with Git?"
    ]
  },
  {
    "question": "How do you track changes in research methodologies using Git commit history?",
    "answer": "Commit changes to methodology files, notebooks, and documentation regularly. Use descriptive commit messages and tags (e.g., `v1-method`, `post-review`) to mark key evolution points in your process.",
    "tags": [
      "git",
      "research",
      "methodology",
      "history"
    ],
    "related": [
      "How do you version notebooks and experiment scripts?",
      "How do you document changes for reproducibility?"
    ]
  },
  {
    "question": "How do you implement Git protocol v2 for optimized fetch operations?",
    "answer": "Git protocol v2 improves performance by reducing unnecessary data during fetches. It\u2019s enabled by default in modern Git versions. To enforce it manually, use `GIT_PROTOCOL=version=2 git fetch` or set `protocol.version=2` in Git config.",
    "tags": [
      "git",
      "protocol",
      "v2",
      "fetch",
      "performance"
    ],
    "related": [
      "How do you speed up fetch operations in Git?",
      "What are the benefits of Git protocol v2?"
    ]
  },
  {
    "question": "How do you diagnose performance bottlenecks in Git over high-latency networks?",
    "answer": "Use shallow clones (`--depth`), limit fetch scope (`--single-branch`), and compress packs. Enable Git protocol v2 for fewer round-trips. Monitor latency using `GIT_TRACE_PACKET=1`.",
    "tags": [
      "git",
      "performance",
      "network",
      "latency"
    ],
    "related": [
      "How do you troubleshoot slow Git clone?",
      "How do you improve Git over VPN?"
    ]
  },
  {
    "question": "How do you use git daemon to host repositories over custom protocols?",
    "answer": "`git daemon` allows you to serve repositories via the Git protocol (`git://`). Run `git daemon --export-all --base-path=/repos` to expose public repos. Ensure port 9418 is open.",
    "tags": [
      "git",
      "daemon",
      "server",
      "protocol"
    ],
    "related": [
      "How do you set up a self-hosted Git server?",
      "What are Git transport protocols and how do they differ?"
    ]
  },
  {
    "question": "What is the role of smart HTTP in improving Git operations over the web?",
    "answer": "Smart HTTP improves efficiency by handling fetch/push using Git-aware endpoints over HTTPS. It supports authentication and partial fetches, unlike dumb HTTP which transfers entire files.",
    "tags": [
      "git",
      "http",
      "smart-http",
      "transport"
    ],
    "related": [
      "How does smart HTTP compare to Git over SSH?",
      "How do you host a Git server over HTTPS?"
    ]
  },
  {
    "question": "How do you troubleshoot connectivity issues with Git over SSH?",
    "answer": "Check SSH key configuration, `~/.ssh/config`, firewall rules, and agent status (`ssh-add -l`). Test with `ssh -T git@github.com`. Regenerate keys if needed and verify access on GitHub.",
    "tags": [
      "git",
      "ssh",
      "connectivity",
      "troubleshooting"
    ],
    "related": [
      "How do you recover a lost SSH key?",
      "How do you rotate SSH keys securely?"
    ]
  },
  {
    "question": "How do you foster engagement in open-source projects hosted on GitHub?",
    "answer": "Maintain clear documentation, use labels like 'good first issue', respond quickly to PRs/issues, create Discussions, and recognize contributors. GitHub README badges and contributor bots also help.",
    "tags": [
      "github",
      "community",
      "open-source",
      "engagement"
    ],
    "related": [
      "How do you grow contributors in a GitHub repo?",
      "What makes an open-source repo beginner-friendly?"
    ]
  },
  {
    "question": "How do you set up community guidelines and enforce them on GitHub?",
    "answer": "Add `CONTRIBUTING.md`, `CODE_OF_CONDUCT.md`, and issue/PR templates. Enforce via bots (e.g., Probot) or GitHub Actions that block PRs if guidelines are not followed.",
    "tags": [
      "github",
      "community",
      "guidelines",
      "open-source"
    ],
    "related": [
      "How do you enforce PR standards?",
      "How do you structure contributing documentation?"
    ]
  },
  {
    "question": "What tools can you use to track community contributions in GitHub repositories?",
    "answer": "Use GitHub Insights, `git shortlog`, third-party tools like Orbit, AllContributors, or GitHub GraphQL API. These tools show contributor activity, engagement, and issue/PR trends.",
    "tags": [
      "github",
      "contributions",
      "insights",
      "community"
    ],
    "related": [
      "How do you analyze contributor trends?",
      "How do you build contributor leaderboards?"
    ]
  },
  {
    "question": "How do you host hackathons or coding challenges using GitHub repositories?",
    "answer": "Create a main repo with instructions, starter code, and issue trackers. Use GitHub Discussions or Projects for coordination. Encourage participants to fork and submit via pull requests.",
    "tags": [
      "github",
      "hackathon",
      "events",
      "collaboration"
    ],
    "related": [
      "How do you run educational challenges on GitHub?",
      "How do you coordinate team submissions in GitHub?"
    ]
  },
  {
    "question": "How do you automate welcome messages for new contributors on GitHub?",
    "answer": "Use GitHub Actions or Probot apps like `welcome` to trigger on a contributor\u2019s first issue or PR. Customize messages with guidelines, links, or thank-you notes.",
    "tags": [
      "github",
      "automation",
      "community",
      "onboarding"
    ],
    "related": [
      "How do you improve onboarding for open-source projects?",
      "How do you set up GitHub bots for engagement?"
    ]
  },
  {
    "question": "How do you manage repositories with multiple programming languages efficiently?",
    "answer": "Structure code in language-specific folders, use `.gitattributes` for language detection, and define `.editorconfig`. Add multi-language CI jobs using GitHub Actions matrix builds.",
    "tags": [
      "git",
      "languages",
      "structure",
      "ci"
    ],
    "related": [
      "How do you set up multi-language build pipelines?",
      "How do you separate concerns in monorepos?"
    ]
  },
  {
    "question": "How do you standardize formatting across different codebases in a repository using .editorconfig?",
    "answer": "Create an `.editorconfig` file in the root with rules per file type (indentation, charset, line endings). Supported by most IDEs and ensures consistent formatting across teams.",
    "tags": [
      "git",
      "editorconfig",
      "formatting",
      "standards"
    ],
    "related": [
      "How do you enforce code formatting in teams?",
      "What tools support .editorconfig?"
    ]
  },
  {
    "question": "How do you handle dependency conflicts in multi-language projects using Git?",
    "answer": "Use isolated environment managers like `venv`, `npm`, or `Docker` per language. Store lock files (e.g., `package-lock.json`, `Pipfile.lock`) and avoid globally installed dependencies.",
    "tags": [
      "git",
      "dependencies",
      "multi-language",
      "conflicts"
    ],
    "related": [
      "How do you use Docker to isolate development environments?",
      "How do you manage language-specific dependencies?"
    ]
  },
  {
    "question": "How do you track language-specific contributions in Git commits?",
    "answer": "Use GitHub\u2019s language statistics or third-party tools like `gitstats` or `cloc`. Analyze commit diffs per file extension to determine language-level activity.",
    "tags": [
      "git",
      "languages",
      "contributions",
      "analytics"
    ],
    "related": [
      "How do you visualize multi-language codebases?",
      "How do you break down contributor stats by tech?"
    ]
  },
  {
    "question": "How do you use Git branches to isolate language-specific codebases in large projects?",
    "answer": "Either use separate branches (if workflows differ) or organize code by folder (e.g., `/python`, `/frontend`). Branching is better for divergent workflows, folders for co-developed features.",
    "tags": [
      "git",
      "branches",
      "structure",
      "multi-language"
    ],
    "related": [
      "When to use mono vs multi-repos for multi-language projects?",
      "How to keep feature parity across language branches?"
    ]
  },
  {
    "question": "How do you manage documentation repositories with continuous updates using Git?",
    "answer": "Use separate branches (`main`, `docs`), automation tools like MkDocs or Sphinx, and GitHub Actions to rebuild docs on push. Store docs in `/docs` or a dedicated repo.",
    "tags": [
      "git",
      "documentation",
      "automation",
      "workflow"
    ],
    "related": [
      "How do you use GitHub Pages for documentation?",
      "How do you automate doc deployment?"
    ]
  },
  {
    "question": "How do you identify stale branches in large-scale repositories?",
    "answer": "Use `git branch -r --merged` or GitHub\u2019s web UI to find branches with no recent commits or merges. Automate cleanup suggestions with bots or scheduled jobs.",
    "tags": [
      "git",
      "branches",
      "cleanup",
      "maintenance"
    ],
    "related": [
      "How do you enforce branch lifecycle policies?",
      "What GitHub Actions detect stale branches?"
    ]
  },
  {
    "question": "How do you track breaking changes across microservices architectures using Git commits?",
    "answer": "Use conventional commits (e.g., `feat!:` or `BREAKING CHANGE:`) and changelog generators like `standard-version`. You can enforce these patterns with linting and CI rules.",
    "tags": [
      "git",
      "microservices",
      "breaking-changes",
      "commits"
    ],
    "related": [
      "How do you automate semantic versioning?",
      "How do you notify teams of API-breaking changes?"
    ]
  },
  {
    "question": "How do you resolve version mismatches across interdependent Git repositories?",
    "answer": "Pin dependency versions using Git tags or hashes. Use a shared changelog or release tracking repo. Automate validation across repos with CI workflows.",
    "tags": [
      "git",
      "versions",
      "dependencies",
      "integration"
    ],
    "related": [
      "How do you manage cross-repo versioning?",
      "How do you prevent version drift between services?"
    ]
  },
  {
    "question": "How do you use Git and GitHub for managing and versioning creative assets like audio and video files?",
    "answer": "Use Git LFS for storing large media, structure assets by project or scene, and version changes with descriptive commits. Use `.gitattributes` to treat media as binary.",
    "tags": [
      "git",
      "media",
      "assets",
      "versioning"
    ],
    "related": [
      "How do you optimize Git for large file workflows?",
      "What tools work well with Git for creative projects?"
    ]
  },
  {
    "question": "How do you partition commit histories for optimized large repository fetches?",
    "answer": "Partitioning is done using shallow clones (`--depth`), partial checkouts, or by segmenting code into smaller sub-repos. Avoid long-lived branches and prune history periodically using `git filter-repo` or `BFG`. This reduces the fetch size and improves CI speed.",
    "tags": [
      "git",
      "performance",
      "fetch",
      "large-repo",
      "history"
    ],
    "related": [
      "How do you use shallow clone in Git?",
      "How do you split large repositories?"
    ]
  },
  {
    "question": "How do you diagnose repository cloning performance issues for ultra-large repositories?",
    "answer": "Enable protocol v2, use `git clone --depth=1 --single-branch`, and reduce repository size with Git LFS for large files. Use network trace tools or `GIT_TRACE_PACKET` to identify slow operations.",
    "tags": [
      "git",
      "clone",
      "performance",
      "diagnosis"
    ],
    "related": [
      "How do you optimize Git for big repositories?",
      "What causes Git to be slow during clone?"
    ]
  },
  {
    "question": "How do you automate feature branch creation for specific development teams in Git?",
    "answer": "Use GitHub Actions, CLI scripts, or GitHub API to create branches programmatically. Naming conventions like `team-x/feature-y` help in organization. You can schedule branch creation in CI/CD.",
    "tags": [
      "git",
      "automation",
      "branching",
      "workflow"
    ],
    "related": [
      "How do you use GitHub API to create branches?",
      "How do you manage naming conventions in Git?"
    ]
  },
  {
    "question": "How do you manage shared repositories across organizations with strict access controls?",
    "answer": "Use GitHub Enterprise organizations with granular team permissions, CODEOWNERS for file-level review control, and role-based access. Enable SAML SSO or OAuth for authentication.",
    "tags": [
      "github",
      "enterprise",
      "access-control",
      "security"
    ],
    "related": [
      "How do you enforce repository policies in GitHub Enterprise?",
      "How do you manage GitHub permissions at scale?"
    ]
  },
  {
    "question": "How do you scale GitHub repository performance for globally distributed contributors?",
    "answer": "Use caching (GitHub Actions cache), shallow clones, and content delivery optimization. Region-based CI runners or GitHub Enterprise Server with geo-replication also help.",
    "tags": [
      "github",
      "scaling",
      "performance",
      "distributed-teams"
    ],
    "related": [
      "How do you optimize fetch for remote teams?",
      "What are GitHub Enterprise features for scaling?"
    ]
  },
  {
    "question": "How do you handle conflicting changes in tracked and untracked files during merges?",
    "answer": "Git prevents merge if untracked files would be overwritten. Move or commit the untracked files first. Use `git status` to see affected files and `git stash` if necessary.",
    "tags": [
      "git",
      "merge",
      "conflict",
      "files"
    ],
    "related": [
      "How do you resolve untracked working tree file errors?",
      "What does 'would be overwritten' mean in Git?"
    ]
  },
  {
    "question": "What is the purpose of git update-index, and how does it manage index states?",
    "answer": "`git update-index` updates the staging area manually. It\u2019s used to mark files as assume-unchanged, skip-worktree, or control index flags directly. It\u2019s useful for advanced Git users and scripting.",
    "tags": [
      "git",
      "index",
      "update-index",
      "staging"
    ],
    "related": [
      "What is the difference between index and working directory in Git?",
      "How do you manage large projects with skip-worktree?"
    ]
  },
  {
    "question": "How do you identify and handle unreachable objects in a Git repository?",
    "answer": "Run `git fsck --unreachable` to find unreachable objects (commits, blobs, etc.). These can accumulate after rebases or deletions. Clean them up with `git gc` or `git prune`.",
    "tags": [
      "git",
      "fsck",
      "unreachable",
      "cleanup"
    ],
    "related": [
      "How does Git garbage collection work?",
      "How do you recover lost commits with reflog?"
    ]
  },
  {
    "question": "How does Git optimize repository cloning using the pack protocol?",
    "answer": "Git\u2019s pack protocol sends compressed packfiles instead of loose objects, reducing bandwidth and improving clone speed. Delta compression in packfiles further reduces transfer size.",
    "tags": [
      "git",
      "pack-protocol",
      "cloning",
      "performance"
    ],
    "related": [
      "What is a Git packfile?",
      "How does delta compression help Git?"
    ]
  },
  {
    "question": "How do you use the git verify-pack command to analyze repository packfiles?",
    "answer": "`git verify-pack -v pack-xxxx.idx` lists objects, sizes, and deltas in a packfile. It helps analyze Git object compression and investigate storage issues or anomalies.",
    "tags": [
      "git",
      "verify-pack",
      "packfile",
      "analysis"
    ],
    "related": [
      "How do you troubleshoot Git storage issues?",
      "How do you inspect Git internals?"
    ]
  },
  {
    "question": "What are repository forks, and how do you synchronize forks with upstream repositories?",
    "answer": "Forks are copies of a repository under your GitHub account. To sync with upstream, add the original repo as a remote (`upstream`), then run `git fetch upstream` and `git merge upstream/main`.",
    "tags": [
      "github",
      "fork",
      "sync",
      "upstream"
    ],
    "related": [
      "How do you contribute to a forked project?",
      "What\u2019s the difference between a fork and a clone?"
    ]
  },
  {
    "question": "How do you manage divergent branches across forked repositories?",
    "answer": "Use `git rebase upstream/main` or merge manually to align forks. Communicate upstream changes early and often. Keep your fork synced to avoid major conflicts.",
    "tags": [
      "git",
      "fork",
      "branching",
      "rebase"
    ],
    "related": [
      "How do you resolve fork sync conflicts?",
      "How do you keep a fork up to date with upstream?"
    ]
  },
  {
    "question": "What is the role of mirror repositories in large-scale development environments?",
    "answer": "Mirror repositories provide read-only or backup copies of production repositories. They\u2019re useful for CI redundancy, offline access, and disaster recovery. Use `--mirror` with `git clone` and `git push`.",
    "tags": [
      "git",
      "mirror",
      "backup",
      "enterprise"
    ],
    "related": [
      "How do you clone and push mirrored Git repositories?",
      "What\u2019s the difference between mirror and fork?"
    ]
  },
  {
    "question": "How do you automate synchronization between mono-repositories and sub-repositories?",
    "answer": "Use GitHub Actions, scheduled scripts, or tools like `git subtree`, `splitsh`, or `Repo`. Define sync rules and automate commits or pushes from parent to child or vice versa.",
    "tags": [
      "git",
      "sync",
      "monorepo",
      "automation"
    ],
    "related": [
      "How do you split a large repo into smaller ones?",
      "What tools help with monorepo maintenance?"
    ]
  },
  {
    "question": "How do you resolve dependency conflicts across interdependent Git repositories?",
    "answer": "Pin versions using tags or hash-based dependencies. Validate compatibility via CI pipelines, use changelogs or release notes, and manage versions centrally using a manifest repo or tools like Lerna.",
    "tags": [
      "git",
      "dependencies",
      "versioning",
      "ci"
    ],
    "related": [
      "How do you avoid version drift in multi-repo setups?",
      "How do you automate dependency version tracking?"
    ]
  },
  {
    "question": "How do you schedule GitHub Actions to run periodically (cron jobs)?",
    "answer": "Use `on: schedule` in your workflow YAML with cron syntax (e.g., `cron: '0 3 * * *'` for daily at 3 AM UTC). GitHub runs the workflow on the default branch.",
    "tags": [
      "github",
      "actions",
      "schedule",
      "cron"
    ],
    "related": [
      "How do you run recurring jobs in GitHub Actions?",
      "What timezone does GitHub cron use?"
    ]
  },
  {
    "question": "How do you create dynamic pull request templates in GitHub?",
    "answer": "Use `.github/PULL_REQUEST_TEMPLATE/` with multiple template files. GitHub will prompt users to select a template. For dynamic content, use checklists or conditionally rendered Markdown with HTML comments.",
    "tags": [
      "github",
      "pr",
      "template",
      "collaboration"
    ],
    "related": [
      "How do you standardize PR formats?",
      "How do you use PR templates for different teams?"
    ]
  },
  {
    "question": "What is the purpose of GitHub webhooks for repository monitoring?",
    "answer": "Webhooks notify external services when events (pushes, PRs, issues) happen in your repo. They enable CI triggers, chat notifications, and real-time integrations by posting JSON payloads to your servers.",
    "tags": [
      "github",
      "webhooks",
      "automation",
      "integration"
    ],
    "related": [
      "How do you secure GitHub webhooks?",
      "What events can trigger a webhook?"
    ]
  },
  {
    "question": "How do you automate repository tagging based on code changes?",
    "answer": "Use GitHub Actions or CI tools to detect changes (e.g., `feat`, `fix`, `BREAKING CHANGE`) in commit messages and trigger version bumps using `semantic-release` or `standard-version`.",
    "tags": [
      "git",
      "tagging",
      "automation",
      "ci"
    ],
    "related": [
      "How do you use conventional commits with CI/CD?",
      "How do you implement semantic versioning automatically?"
    ]
  },
  {
    "question": "How do you integrate GitHub Actions with external APIs?",
    "answer": "Use HTTP requests in workflows with `curl` or actions like `octokit/request-action`. Store API keys in GitHub Secrets and handle authentication headers securely.",
    "tags": [
      "github",
      "actions",
      "api",
      "integration"
    ],
    "related": [
      "How do you authenticate securely in GitHub Actions?",
      "What are best practices for calling APIs in workflows?"
    ]
  },
  {
    "question": "How do you configure post-receive hooks for remote repository workflows?",
    "answer": "Post-receive hooks run after a push is completed to the remote repo. Place the hook in `.git/hooks/post-receive` and make it executable. It's useful for triggering CI builds, notifications, or deployment scripts.",
    "tags": [
      "git",
      "hooks",
      "post-receive",
      "automation"
    ],
    "related": [
      "How do you trigger external scripts using Git hooks?",
      "How do server-side Git hooks differ from client-side?"
    ]
  },
  {
    "question": "What is the purpose of the pre-push hook, and how does it optimize workflows?",
    "answer": "The `pre-push` hook runs before a push is sent to a remote. It's ideal for verifying tests, enforcing formatting, or blocking unauthorized branch pushes. It improves consistency before integration.",
    "tags": [
      "git",
      "hooks",
      "pre-push",
      "workflow"
    ],
    "related": [
      "How do you use pre-commit and pre-push hooks together?",
      "How do you prevent bad code from being pushed?"
    ]
  },
  {
    "question": "How do you implement server-side hooks to enforce repository policies?",
    "answer": "Place hooks like `pre-receive` or `update` on the remote server in the `.git/hooks/` directory. These can validate commit messages, block pushes to `main`, or enforce signing. Only available in self-hosted setups.",
    "tags": [
      "git",
      "hooks",
      "server-side",
      "policy"
    ],
    "related": [
      "How do you restrict force pushes in Git?",
      "How do you validate commits on the server?"
    ]
  },
  {
    "question": "How do you use the prepare-commit-msg hook for dynamic commit templates?",
    "answer": "The `prepare-commit-msg` hook allows you to modify or populate commit messages dynamically (e.g., add ticket IDs). It runs after the commit message is created but before the editor opens.",
    "tags": [
      "git",
      "hooks",
      "commit-msg",
      "templates"
    ],
    "related": [
      "How do you enforce commit conventions in Git?",
      "What\u2019s the difference between prepare-commit-msg and commit-msg?"
    ]
  },
  {
    "question": "How do you test and debug custom Git hooks effectively?",
    "answer": "Add logging (e.g., `echo` or `logger`) in your hook scripts. Run them manually or simulate Git commands. Check hook permissions, environment variables, and make sure scripts use the correct interpreter (e.g., `#!/bin/bash`).",
    "tags": [
      "git",
      "hooks",
      "debug",
      "testing"
    ],
    "related": [
      "How do you simulate Git operations locally?",
      "Why is my Git hook not running?"
    ]
  },
  {
    "question": "How do you recover lost commits from dangling objects in Git?",
    "answer": "Use `git fsck --lost-found` or `git reflog` to identify and recover commits not referenced in any branch. Create a new branch from the dangling commit hash to restore the work.",
    "tags": [
      "git",
      "recovery",
      "dangling",
      "fsck"
    ],
    "related": [
      "How do you restore commits using reflog?",
      "What are dangling objects in Git?"
    ]
  },
  {
    "question": "How do you resolve errors caused by invalid reflog entries?",
    "answer": "Corrupted reflog entries often require manual editing or resetting. Use `git reflog expire` to clean up invalid entries, and run `git gc` to remove unreachable refs. Backup before making manual changes.",
    "tags": [
      "git",
      "reflog",
      "error",
      "recovery"
    ],
    "related": [
      "How do you reset a corrupted Git history?",
      "How does git gc help maintain repository health?"
    ]
  },
  {
    "question": "What steps can you take to recover a Git repository affected by object expiration?",
    "answer": "If `git gc` has deleted unreferenced objects, try `git fsck` to identify issues. Use backups or clone from remote if available. Prevent future expiration with `git reflog expire --expire=never` for critical refs.",
    "tags": [
      "git",
      "gc",
      "recovery",
      "expiration"
    ],
    "related": [
      "How do you prevent commit loss in Git?",
      "How does object expiration work in Git?"
    ]
  },
  {
    "question": "How do you debug errors related to inconsistent branch histories?",
    "answer": "Use `git log --graph` or `gitk` to visualize history. Look for missing merges, rebases, or forced changes. Compare with remotes, and if necessary, reset or rebase to align branch histories.",
    "tags": [
      "git",
      "debug",
      "history",
      "branches"
    ],
    "related": [
      "How do you recover from a bad rebase?",
      "How do you align branches after divergence?"
    ]
  },
  {
    "question": "How do you troubleshoot slow clone times for massive repositories?",
    "answer": "Use `--depth 1` for shallow clones, disable submodules temporarily, and exclude LFS files with `GIT_LFS_SKIP_SMUDGE=1`. Ensure network isn\u2019t throttling and that Git is using protocol v2.",
    "tags": [
      "git",
      "clone",
      "performance",
      "large-repo"
    ],
    "related": [
      "How do you improve clone speed in CI pipelines?",
      "How do you deal with slow Git over SSH?"
    ]
  },
  {
    "question": "How does GitHub protect repository data during cloning and pushes?",
    "answer": "GitHub uses HTTPS and SSH protocols with encryption, 2FA for accounts, and verified commit signatures. On the backend, GitHub stores repo data redundantly with automatic backups and snapshots.",
    "tags": [
      "github",
      "security",
      "cloning",
      "pushing"
    ],
    "related": [
      "How secure is GitHub over SSH vs HTTPS?",
      "How does GitHub store repository data?"
    ]
  },
  {
    "question": "How do you implement branch-level security protocols on GitHub?",
    "answer": "Use branch protection rules under repository settings. Require PR reviews, disallow force pushes, require signed commits, and enforce status checks before merge. Use CODEOWNERS for targeted protection.",
    "tags": [
      "github",
      "security",
      "branch",
      "protection"
    ],
    "related": [
      "How do you enforce merge requirements in GitHub?",
      "What are CODEOWNERS in GitHub?"
    ]
  },
  {
    "question": "How do you rotate personal access tokens securely in GitHub workflows?",
    "answer": "Store tokens as GitHub Secrets. When rotating, update them in all affected repos and environments. Use short-lived tokens or fine-grained PATs, and automate revocation with GitHub\u2019s API or CLI.",
    "tags": [
      "github",
      "security",
      "tokens",
      "rotation"
    ],
    "related": [
      "How do you manage secrets in GitHub Actions?",
      "How do you expire and renew API keys securely?"
    ]
  },
  {
    "question": "How do you scan repositories for potential backdoor vulnerabilities?",
    "answer": "Use GitHub Advanced Security features like code scanning and secret scanning. Integrate third-party scanners like SonarQube, Snyk, or Trivy. Review dependency changes and maintain audit logs.",
    "tags": [
      "github",
      "security",
      "scanning",
      "vulnerability"
    ],
    "related": [
      "How do you use CodeQL for static analysis?",
      "What are common supply chain attacks in GitHub?"
    ]
  },
  {
    "question": "How do you configure security audits for open-source GitHub repositories?",
    "answer": "Enable Dependabot, code scanning, and secret scanning. Use branch protection and security policies in `SECURITY.md`. Review new contributors and monitor package ecosystem alerts.",
    "tags": [
      "github",
      "security",
      "audit",
      "open-source"
    ],
    "related": [
      "How do you monitor security risks in dependencies?",
      "What GitHub features help open-source security?"
    ]
  },
  {
    "question": "What is the difference between Git\u2019s http, ssh, and git protocols for repository access?",
    "answer": "HTTP is user-friendly and firewall-safe, SSH is secure and script-friendly with keys, and Git protocol is fastest but unauthenticated and deprecated for public use. SSH is recommended for automation.",
    "tags": [
      "git",
      "protocols",
      "ssh",
      "http"
    ],
    "related": [
      "How do you choose the best Git protocol for CI?",
      "Why is the git:// protocol discouraged?"
    ]
  },
  {
    "question": "How does Git handle authentication over the http protocol?",
    "answer": "Git over HTTP uses username/password or personal access tokens. GitHub now enforces token-based auth. Use credential managers to avoid re-entering tokens on each push/pull.",
    "tags": [
      "git",
      "http",
      "authentication",
      "security"
    ],
    "related": [
      "How do you set up token authentication in Git?",
      "What are Git credential managers?"
    ]
  },
  {
    "question": "What are the performance differences between cloning over ssh and http?",
    "answer": "SSH and HTTP offer similar speeds, but SSH is often slightly faster in stable networks. HTTP can be slower due to HTTPS negotiation and credential prompts, but is firewall-friendly.",
    "tags": [
      "git",
      "clone",
      "http",
      "ssh",
      "performance"
    ],
    "related": [
      "How do you speed up Git authentication?",
      "Which Git protocol is best for large repos?"
    ]
  },
  {
    "question": "How do you set up GIT_PROXY_COMMAND for custom proxy configurations?",
    "answer": "Set the `GIT_PROXY_COMMAND` environment variable to a script that routes traffic via your proxy. This is useful in restricted networks. For example, use a SOCKS proxy tunnel for Git commands.",
    "tags": [
      "git",
      "proxy",
      "network",
      "configuration"
    ],
    "related": [
      "How do you use Git behind a corporate proxy?",
      "How do you configure Git for offline usage?"
    ]
  },
  {
    "question": "How do you troubleshoot issues with Git over VPNs or firewalls?",
    "answer": "Use HTTPS instead of SSH if ports are blocked. Check VPN DNS resolution, proxy rules, and SSL inspection. For SSH, try port 443 fallback. Use verbose flags (`-v`) for debugging.",
    "tags": [
      "git",
      "vpn",
      "firewall",
      "troubleshooting"
    ],
    "related": [
      "How do you configure Git in restrictive networks?",
      "What port does Git use for SSH?"
    ]
  },
  {
    "question": "How do you integrate Git workflows with monolithic codebases?",
    "answer": "For monolithic repositories, use feature branches, subdirectory organization by module, and commit conventions. You can also isolate CI jobs by paths and use tools like Lerna or Bazel for scoped builds.",
    "tags": [
      "git",
      "monorepo",
      "workflow",
      "organization"
    ],
    "related": [
      "What are the pros and cons of monorepos?",
      "How do you scale CI/CD for monolithic repositories?"
    ]
  },
  {
    "question": "What is a trunk-based development workflow, and how does it compare to feature branching?",
    "answer": "Trunk-based development involves all developers committing to a single mainline branch frequently, with short-lived branches. It reduces merge conflicts and accelerates integration. Feature branching uses longer-lived branches, which can delay merges.",
    "tags": [
      "git",
      "workflow",
      "trunk",
      "feature-branch"
    ],
    "related": [
      "How do you implement CI in trunk-based development?",
      "What are the risks of long-lived feature branches?"
    ]
  },
  {
    "question": "How do you manage branch workflows in distributed development teams?",
    "answer": "Establish branch naming conventions, use protected branches, and enforce pull request reviews. GitHub Actions or bots can help ensure consistent CI, testing, and deployment across branches and teams.",
    "tags": [
      "git",
      "branches",
      "distributed",
      "workflow"
    ],
    "related": [
      "How do you organize branching strategies for teams?",
      "What tools enforce consistent Git workflows?"
    ]
  },
  {
    "question": "How do you set up a release-based branching model?",
    "answer": "Use permanent branches like `main` and `develop`, and create release branches like `release/v1.0`. Tag releases, backport fixes with hotfix branches, and merge changes back to main and develop post-release.",
    "tags": [
      "git",
      "releases",
      "branching",
      "workflow"
    ],
    "related": [
      "How do you automate version tagging in Git?",
      "What is the difference between hotfix and feature branches?"
    ]
  },
  {
    "question": "What is a gitflow workflow, and what are its pros and cons?",
    "answer": "Gitflow uses dedicated branches for features, releases, and hotfixes, with strict merging rules. It's good for large teams needing stability but can be complex and slow for fast-paced development.",
    "tags": [
      "git",
      "gitflow",
      "workflow",
      "branching"
    ],
    "related": [
      "How does gitflow compare to trunk-based development?",
      "What tools support gitflow automation?"
    ]
  },
  {
    "question": "How does Git optimize its internal storage for very large repositories?",
    "answer": "Git uses delta compression, packfiles, and garbage collection to reduce storage. Features like sparse-checkout, partial clone, and protocol v2 reduce memory and disk use during operations.",
    "tags": [
      "git",
      "storage",
      "optimization",
      "internals"
    ],
    "related": [
      "What is a Git packfile and how is it used?",
      "How do you clean up unused objects in Git?"
    ]
  },
  {
    "question": "What is the purpose of the alternates mechanism in Git storage?",
    "answer": "Alternates allow one Git repo to reference another\u2019s object database to avoid duplication. It\u2019s useful in large-scale CI/CD where repos share a common object base to save space and time.",
    "tags": [
      "git",
      "storage",
      "alternates",
      "objects"
    ],
    "related": [
      "How do shared object databases work in Git?",
      "What is the role of alternates in Git performance?"
    ]
  },
  {
    "question": "How do you inspect Git's compression ratios for packfiles?",
    "answer": "Run `git verify-pack -v` and `git count-objects -vH` to view object sizes and compression stats. Git compresses objects during packing to reduce storage footprint and fetch size.",
    "tags": [
      "git",
      "packfiles",
      "compression",
      "metrics"
    ],
    "related": [
      "How do you trigger repacking in Git?",
      "How do you analyze storage usage in Git?"
    ]
  },
  {
    "question": "How do you diagnose storage inefficiencies in a repository?",
    "answer": "Use `git-sizer` to detect large objects, long paths, or deep histories. Run `git count-objects` and inspect the `.git/objects` folder for size anomalies. Remove or rewrite large objects if needed.",
    "tags": [
      "git",
      "storage",
      "analysis",
      "optimization"
    ],
    "related": [
      "How do you reduce Git repo size?",
      "How do you rewrite history to remove large files?"
    ]
  },
  {
    "question": "How does Git\u2019s object deduplication mechanism work for forked repositories?",
    "answer": "Git identifies objects by SHA-1, so identical commits, trees, or blobs are stored once even across forks. Hosting platforms like GitHub deduplicate storage between forks behind the scenes.",
    "tags": [
      "git",
      "fork",
      "deduplication",
      "storage"
    ],
    "related": [
      "How does GitHub optimize storage for forks?",
      "How do you avoid duplicate objects across repos?"
    ]
  },
  {
    "question": "How do you create GitHub templates for repositories with specific structures?",
    "answer": "Create a template repository with boilerplate code, configs, and folders. Mark it as a template in repository settings. Others can then use 'Use this template' to create new projects with the same structure.",
    "tags": [
      "github",
      "templates",
      "structure",
      "starter"
    ],
    "related": [
      "How do you manage starter projects in GitHub?",
      "What are best practices for reusable GitHub repos?"
    ]
  },
  {
    "question": "How do you host collaborative research datasets using GitHub repositories?",
    "answer": "Store metadata and small datasets in the repo. Use Git LFS for large files and publish with GitHub Pages for documentation. Collaborators can contribute via pull requests or issues.",
    "tags": [
      "github",
      "research",
      "datasets",
      "collaboration"
    ],
    "related": [
      "How do you use GitHub for scientific experiments?",
      "What\u2019s the role of Git LFS in research?"
    ]
  },
  {
    "question": "What are the challenges of hosting a community-driven project on GitHub, and how do you overcome them?",
    "answer": "Challenges include maintaining quality, coordinating contributions, and avoiding burnout. Use issue templates, contribution guidelines, active moderation, and automated testing to scale sustainably.",
    "tags": [
      "github",
      "community",
      "open-source",
      "collaboration"
    ],
    "related": [
      "How do you grow and manage GitHub communities?",
      "What tools help moderate open-source projects?"
    ]
  },
  {
    "question": "How do you manage GitHub repositories as an open-source foundation?",
    "answer": "Use organizations for project governance, define roles (maintainers, reviewers), enforce branch protection, and document governance in a `GOVERNANCE.md`. Encourage transparency with issues and discussions.",
    "tags": [
      "github",
      "foundation",
      "governance",
      "open-source"
    ],
    "related": [
      "How do open-source orgs manage permissions?",
      "What are governance best practices in GitHub?"
    ]
  },
  {
    "question": "How do you migrate repositories from private to public while preserving commit history?",
    "answer": "Make the repo public in settings. Remove sensitive data first using tools like `BFG` or `git filter-repo`. Verify licenses and contributor agreements are clear before opening access.",
    "tags": [
      "git",
      "github",
      "migration",
      "open-source"
    ],
    "related": [
      "How do you clean Git history before open-sourcing?",
      "What files should be reviewed before going public?"
    ]
  },
  {
    "question": "How do you locate and repair corrupted index entries in a repository?",
    "answer": "If you get index errors, try `rm .git/index` and run `git reset`. For deep corruption, clone fresh or use `git fsck` and `git reflog` to recover valid references and rebuild.",
    "tags": [
      "git",
      "index",
      "corruption",
      "repair"
    ],
    "related": [
      "How do you fix index.lock errors?",
      "How do you recover Git state after corruption?"
    ]
  },
  {
    "question": "How do you recover repository data after an interrupted garbage collection?",
    "answer": "If `git gc` was interrupted, run `git fsck` to identify damage. Use reflog to recover dangling commits. Avoid force-pushing during gc, and always back up before running aggressive cleanups.",
    "tags": [
      "git",
      "gc",
      "recovery",
      "repository"
    ],
    "related": [
      "What happens if git gc fails?",
      "How do you restore objects removed by gc?"
    ]
  },
  {
    "question": "How do you resolve synchronization issues between Git submodules and their parent repositories?",
    "answer": "Run `git submodule update --init --recursive` to sync all submodules. Ensure correct commit refs are tracked. Fix broken links in `.gitmodules` or manually reset submodule HEADs.",
    "tags": [
      "git",
      "submodule",
      "sync",
      "repository"
    ],
    "related": [
      "How do you remove and re-add submodules?",
      "How do you lock submodules to a specific version?"
    ]
  },
  {
    "question": "What steps can you take to debug unexplained object misplacements in the .git folder?",
    "answer": "Use `git fsck` and `git rev-list` to trace object references. Check for broken links, corrupt packfiles, or misconfigured alternates. Restore missing objects from backups or remotes if needed.",
    "tags": [
      "git",
      "objects",
      "corruption",
      "debug"
    ],
    "related": [
      "How do you rebuild Git objects from commit hashes?",
      "How do you analyze packfile structure in Git?"
    ]
  },
  {
    "question": "How do you trace and resolve intermittent merge conflicts in continuously integrated branches?",
    "answer": "Enable automatic conflict detection via CI, analyze conflict frequency with Git history, and encourage frequent merges from `main`. Use tools like `rerere` to remember and auto-resolve repeated conflicts.",
    "tags": [
      "git",
      "merge",
      "conflict",
      "ci"
    ],
    "related": [
      "How do you use git rerere?",
      "How do you reduce merge conflicts in shared branches?"
    ]
  },
  {
    "question": "How do you manage concurrency in GitHub Action workflows?",
    "answer": "Use the `concurrency` key in your GitHub Actions workflow YAML to ensure only one job runs per environment or branch. This prevents race conditions by canceling or queuing redundant workflows.",
    "tags": [
      "github",
      "actions",
      "concurrency",
      "workflow"
    ],
    "related": [
      "How do you prevent duplicate GitHub Actions runs?",
      "What is the concurrency group in GitHub Actions?"
    ]
  },
  {
    "question": "How do you handle secret rotation in GitHub Actions without breaking workflows?",
    "answer": "Store secrets in GitHub Secrets. During rotation, add the new secret before removing the old one. Use environment variables to reference them and test with dry-run workflows before full rollout.",
    "tags": [
      "github",
      "secrets",
      "security",
      "rotation"
    ],
    "related": [
      "How do you automate secret updates in GitHub?",
      "How do you prevent workflow failure during secret changes?"
    ]
  },
  {
    "question": "How do you automate changelog generation using GitHub Actions?",
    "answer": "Use actions like `release-drafter` or `github-changelog-generator`. These tools parse commit messages or PR labels and generate release notes or changelogs automatically during CI/CD pipelines.",
    "tags": [
      "github",
      "actions",
      "changelog",
      "automation"
    ],
    "related": [
      "How do you automate semantic release notes?",
      "How do you integrate changelog with GitHub releases?"
    ]
  },
  {
    "question": "How do you conditionally skip GitHub Actions jobs based on repository state?",
    "answer": "Use `if:` conditionals in the job or step definitions, checking variables like `github.event_name`, `github.ref`, or custom outputs from previous steps to control execution flow.",
    "tags": [
      "github",
      "actions",
      "conditional",
      "workflow"
    ],
    "related": [
      "What are common conditional expressions in GitHub Actions?",
      "How do you skip jobs for documentation-only commits?"
    ]
  },
  {
    "question": "How do you handle dependencies across multiple repositories in GitHub Actions?",
    "answer": "Use `repository_dispatch`, reusable workflows, or pull dependencies via the GitHub API. For tighter control, set up a monorepo or use a central manifest file with version pins.",
    "tags": [
      "github",
      "actions",
      "dependencies",
      "multi-repo"
    ],
    "related": [
      "How do you trigger workflows across repositories?",
      "What are best practices for managing CI in multi-repo projects?"
    ]
  },
  {
    "question": "How do you manage commit history size in repositories with thousands of contributors?",
    "answer": "Encourage squash merges, archive old branches, and periodically prune unused refs. Use `git gc`, shallow clones, and avoid large binary files in history. Use GitHub Insights to monitor activity.",
    "tags": [
      "git",
      "history",
      "contributors",
      "scale"
    ],
    "related": [
      "How do you keep Git history clean and readable?",
      "How do you manage forks and clones in high-traffic repos?"
    ]
  },
  {
    "question": "How do you optimize repository fetches for geographically distributed teams?",
    "answer": "Enable shallow clones, use GitHub's geo-distributed CDN, and create mirror repositories in different regions. For self-hosted setups, use geo-replication with GitHub Enterprise Server.",
    "tags": [
      "git",
      "fetch",
      "performance",
      "distributed-teams"
    ],
    "related": [
      "How do you reduce Git latency across continents?",
      "What caching techniques help with Git fetches?"
    ]
  },
  {
    "question": "How do you split a mono-repository into micro-repositories without breaking dependencies?",
    "answer": "Use `git subtree split`, `filter-repo`, or `BFG` to extract folders into new repos with full history. Track cross-repo dependencies with submodules or package registries like GitHub Packages.",
    "tags": [
      "git",
      "monorepo",
      "split",
      "dependencies"
    ],
    "related": [
      "How do you convert a folder to an independent Git repo?",
      "How do you maintain links between split repositories?"
    ]
  },
  {
    "question": "How do you identify unused files in extremely large repositories?",
    "answer": "Use scripts to detect files not modified in recent commits or not referenced in builds. Tools like `git log --diff-filter=D` or `git ls-tree` can help inspect historic and active usage.",
    "tags": [
      "git",
      "cleanup",
      "large-repo",
      "files"
    ],
    "related": [
      "How do you remove orphaned files in Git?",
      "What Git tools help identify dead code or unused assets?"
    ]
  },
  {
    "question": "How do you improve CI/CD performance in repositories with extensive test suites?",
    "answer": "Use caching (`actions/cache`), parallel jobs with `matrix` strategy, test sharding, and run tests conditionally. Avoid full clones and keep dependencies up-to-date to reduce build times.",
    "tags": [
      "github",
      "ci/cd",
      "performance",
      "testing"
    ],
    "related": [
      "How do you optimize workflows for large test suites?",
      "What techniques improve test execution speed in CI?"
    ]
  },
  {
    "question": "How do you implement GitOps workflows for infrastructure management?",
    "answer": "GitOps uses Git as the source of truth for infrastructure. Tools like Argo CD or Flux automatically apply changes from Git to Kubernetes clusters. Changes are proposed via pull requests and synced via controllers.",
    "tags": [
      "gitops",
      "infrastructure",
      "devops",
      "kubernetes"
    ],
    "related": [
      "How do you use Git for declarative infrastructure?",
      "What are GitOps best practices with Kubernetes?"
    ]
  },
  {
    "question": "How do you manage configuration files for containerized applications using GitHub?",
    "answer": "Store environment-specific configs in separate folders or branches. Use secrets for sensitive values and GitHub Actions to validate config syntax. GitOps tools can auto-deploy config changes to clusters.",
    "tags": [
      "github",
      "config",
      "containers",
      "infrastructure"
    ],
    "related": [
      "How do you structure config repos for microservices?",
      "How do you keep environment configs in sync?"
    ]
  },
  {
    "question": "How do you integrate GitHub with Kubernetes for deployment pipelines?",
    "answer": "Use GitHub Actions with `kubectl`, Helm, or GitOps tools like Argo CD to deploy manifests or Helm charts to Kubernetes. Authenticate using service account tokens or OIDC federation.",
    "tags": [
      "github",
      "kubernetes",
      "ci/cd",
      "deployment"
    ],
    "related": [
      "How do you use GitHub Actions to manage clusters?",
      "What GitHub Actions tools support Kubernetes?"
    ]
  },
  {
    "question": "What is the significance of GitHub Environments in DevOps workflows?",
    "answer": "GitHub Environments define deploy targets like staging or production. You can associate secrets, set up required reviewers, and use protection rules to ensure safe, gradual deployment through pipelines.",
    "tags": [
      "github",
      "environments",
      "devops",
      "deployment"
    ],
    "related": [
      "How do you control deployments using GitHub Environments?",
      "What are approval gates in GitHub CI/CD?"
    ]
  },
  {
    "question": "How do you use Git tags to automate deployment processes in CI/CD?",
    "answer": "Use semantic versioning tags like `v1.2.3` to trigger deployments. GitHub Actions can use `on: push: tags:` to initiate workflows for building, testing, and deploying tagged releases.",
    "tags": [
      "git",
      "tags",
      "deployment",
      "ci/cd"
    ],
    "related": [
      "How do you trigger GitHub Actions on version tags?",
      "How do you manage release workflows with tags?"
    ]
  },
  {
    "question": "How do you choose an open-source project to contribute to on GitHub?",
    "answer": "Look for active repos with beginner-friendly tags like `good first issue`, responsive maintainers, clear contribution guidelines, and tech stacks you\u2019re familiar with. Also check issue backlog and licensing.",
    "tags": [
      "github",
      "open-source",
      "contribution",
      "community"
    ],
    "related": [
      "How do you evaluate a GitHub project\u2019s health?",
      "Where to find beginner-friendly GitHub issues?"
    ]
  },
  {
    "question": "What is the best way to write a compelling pull request description for maintainers?",
    "answer": "Include a summary of the change, motivation, related issues, screenshots (if UI-related), and test instructions. Keep it structured and link to relevant documentation or discussions.",
    "tags": [
      "github",
      "pull-request",
      "contribution",
      "collaboration"
    ],
    "related": [
      "How do you structure GitHub pull requests?",
      "What do maintainers expect from contributors?"
    ]
  },
  {
    "question": "How do you handle contributor license agreements (CLAs) in GitHub repositories?",
    "answer": "Use bots like CLA Assistant or GitHub Actions to require contributors to sign a digital CLA before merging PRs. Store the agreement terms in the repository and enforce with CI checks.",
    "tags": [
      "github",
      "cla",
      "legal",
      "contribution"
    ],
    "related": [
      "Why are CLAs important in open source?",
      "How do you automate CLA checks in GitHub?"
    ]
  },
  {
    "question": "How do you deal with issues labeled \u201cgood first issue\u201d as a beginner contributor?",
    "answer": "Read the issue carefully, check for existing discussion, and comment to express interest. Follow contribution guidelines, fork the repo, and submit a clear pull request when ready.",
    "tags": [
      "github",
      "beginner",
      "issues",
      "open-source"
    ],
    "related": [
      "How do you start contributing to open-source?",
      "How do you avoid duplicate work in GitHub issues?"
    ]
  },
  {
    "question": "How do you engage with maintainers of a repository when your pull request gets stalled?",
    "answer": "Be polite and patient. Comment with updates or questions after a few days. Tag maintainers if needed. You can also join Discussions or contact via linked community channels if provided.",
    "tags": [
      "github",
      "communication",
      "pull-request",
      "collaboration"
    ],
    "related": [
      "How do you increase visibility for PRs?",
      "What etiquette should contributors follow on GitHub?"
    ]
  },
  {
    "question": "How do you use Git with Jenkins for building pipelines?",
    "answer": "In Jenkins, configure the Git plugin to connect your repository via HTTPS or SSH. Set up pipelines using `Jenkinsfile` with `checkout scm` or `git` commands. Trigger builds on commit or PR events using webhooks from GitHub.",
    "tags": [
      "git",
      "jenkins",
      "ci/cd",
      "pipeline"
    ],
    "related": [
      "How do you trigger Jenkins jobs from GitHub?",
      "What are best practices for Jenkins + Git integration?"
    ]
  },
  {
    "question": "How do you configure Visual Studio Code for seamless Git integration?",
    "answer": "VS Code includes built-in Git support. Use the Source Control panel for commits, branches, and merges. Install GitLens for enhanced insights and configure Git settings in `settings.json` for personalized workflows.",
    "tags": [
      "git",
      "vscode",
      "editor",
      "integration"
    ],
    "related": [
      "How do you manage branches in VS Code?",
      "What are useful Git extensions for VS Code?"
    ]
  },
  {
    "question": "How do you integrate Git with Azure DevOps repositories?",
    "answer": "Azure DevOps supports Git-based repos. You can clone using HTTPS/SSH, push code, and create PRs within the portal. Use Azure Pipelines to build, test, and deploy based on Git commit triggers.",
    "tags": [
      "git",
      "azure",
      "devops",
      "integration"
    ],
    "related": [
      "How do you set up CI/CD in Azure using Git?",
      "What Git permissions are available in Azure DevOps?"
    ]
  },
  {
    "question": "What are the benefits of using Git with Docker for development workflows?",
    "answer": "Git provides version control while Docker ensures consistent environments. Store Dockerfiles in your repo, use GitHub Actions to build/push images, and maintain reproducible builds across teams.",
    "tags": [
      "git",
      "docker",
      "ci/cd",
      "workflow"
    ],
    "related": [
      "How do you automate Docker builds with GitHub Actions?",
      "How do Git and Docker support infrastructure as code?"
    ]
  },
  {
    "question": "How do you use Git with task management tools like Trello or Asana?",
    "answer": "Use GitHub integrations or third-party tools to link commits and PRs to tasks. Mention task IDs in commit messages or PR titles. Some tools support automation using webhooks or APIs.",
    "tags": [
      "git",
      "task-management",
      "trello",
      "asana"
    ],
    "related": [
      "How do you sync Git commits with project boards?",
      "What integrations link GitHub with Trello or Jira?"
    ]
  },
  {
    "question": "How do you version control Jupyter notebooks using Git?",
    "answer": "Track `.ipynb` files in Git, but avoid merge conflicts by cleaning outputs (`nbstripout`) or using tools like `nbdime` for notebook diffs. Store notebooks in separate branches if outputs are large.",
    "tags": [
      "git",
      "jupyter",
      "notebooks",
      "data-science"
    ],
    "related": [
      "How do you handle merge conflicts in Jupyter notebooks?",
      "What tools help diff and review notebooks in Git?"
    ]
  },
  {
    "question": "What are best practices for handling large datasets with Git?",
    "answer": "Avoid storing raw data in Git. Use Git LFS for large files, DVC for ML workflows, or reference datasets from cloud storage. Store metadata and scripts in Git, and automate retrieval in CI.",
    "tags": [
      "git",
      "data",
      "datasets",
      "lfs"
    ],
    "related": [
      "How do you use DVC with Git for ML projects?",
      "How do you version large binary files in Git?"
    ]
  },
  {
    "question": "How do you collaborate on machine learning projects using GitHub?",
    "answer": "Use branch-based workflows for experimentation, track notebooks with `nbdime`, use DVC for data and model versioning, and automate training/test pipelines using GitHub Actions or cloud tools.",
    "tags": [
      "github",
      "machine-learning",
      "collaboration",
      "dvc"
    ],
    "related": [
      "How do you use GitHub for model reproducibility?",
      "What tools help ML collaboration in Git?"
    ]
  },
  {
    "question": "How do you structure a Git repository for reproducible research workflows?",
    "answer": "Organize with `/data`, `/src`, `/notebooks`, and `/results`. Use environment files (`requirements.txt`, `environment.yml`), Git LFS for data, and track versions with tags or DVC pipelines.",
    "tags": [
      "git",
      "research",
      "structure",
      "reproducibility"
    ],
    "related": [
      "What folder structure supports reproducible ML projects?",
      "How do you maintain reproducibility in Git-based research?"
    ]
  },
  {
    "question": "How do you use GitHub Actions to automate data preprocessing tasks?",
    "answer": "Create workflows that run Python or shell scripts on `push` or `schedule`. Use caching to speed up installs and store processed data in artifacts or push to cloud storage via API.",
    "tags": [
      "github",
      "actions",
      "data",
      "automation"
    ],
    "related": [
      "How do you run data pipelines with GitHub Actions?",
      "How do you schedule periodic ETL tasks using GitHub?"
    ]
  },
  {
    "question": "How do you manage a writing project (e.g., a novel or script) using GitHub?",
    "answer": "Structure chapters or scenes in separate files or folders, track changes via commits, and use branches for drafting alternate versions. GitHub Issues can help manage writing tasks, and GitHub Pages can host preview drafts.",
    "tags": [
      "github",
      "writing",
      "creative",
      "project-management"
    ],
    "related": [
      "How do authors collaborate on books using Git?",
      "What are GitHub best practices for non-code projects?"
    ]
  },
  {
    "question": "How do musicians or bands collaborate on compositions using GitHub?",
    "answer": "Use Git LFS to store large audio files and version control DAW project files. Use branches for alternate takes or edits. GitHub can manage releases, and Issues can track collaboration tasks.",
    "tags": [
      "github",
      "music",
      "collaboration",
      "lfs"
    ],
    "related": [
      "How do you use Git for versioning audio projects?",
      "What Git tools support music production workflows?"
    ]
  },
  {
    "question": "How do you use GitHub to maintain a portfolio or resume?",
    "answer": "Create a GitHub Pages site or host a markdown-based resume directly in a repository. Use actions to auto-update content (e.g., blog sync). Showcase work through pinned repos or interactive demos.",
    "tags": [
      "github",
      "portfolio",
      "resume",
      "pages"
    ],
    "related": [
      "How do developers build personal sites with GitHub?",
      "What are the benefits of a GitHub-based resume?"
    ]
  },
  {
    "question": "How do you host an interactive website using GitHub Pages and JavaScript?",
    "answer": "Push your static site (HTML/CSS/JS) to a repository and enable GitHub Pages. You can use frameworks like React, or static site generators like Jekyll. Assets are served directly from GitHub\u2019s CDN.",
    "tags": [
      "github",
      "pages",
      "javascript",
      "hosting"
    ],
    "related": [
      "How do you deploy a React app using GitHub Pages?",
      "What limitations exist for GitHub Pages hosting?"
    ]
  },
  {
    "question": "How do you run virtual events or hackathons using GitHub?",
    "answer": "Set up a main event repo with instructions, starter code, and contribution guides. Use Discussions for Q&A, Issues for support, and GitHub Projects to manage tasks. Collect submissions via pull requests.",
    "tags": [
      "github",
      "events",
      "hackathon",
      "community"
    ],
    "related": [
      "How do you organize online coding challenges with GitHub?",
      "What tools help coordinate virtual events on GitHub?"
    ]
  },
  {
    "question": "How do educators create and manage classroom repositories on GitHub?",
    "answer": "Use GitHub Classroom to generate private repos per student/team with starter code. Track submissions, provide inline feedback, and automate grading through CI workflows or GitHub Actions.",
    "tags": [
      "github",
      "education",
      "classroom",
      "teaching"
    ],
    "related": [
      "What is GitHub Classroom and how does it work?",
      "How do you manage student projects using GitHub?"
    ]
  },
  {
    "question": "What are the benefits of using GitHub Classroom for assignments?",
    "answer": "GitHub Classroom simplifies repo creation, submission tracking, and feedback. It supports auto-grading, integrates with learning management systems, and teaches students real-world Git workflows.",
    "tags": [
      "github",
      "classroom",
      "assignments",
      "automation"
    ],
    "related": [
      "How do you auto-grade with GitHub Classroom?",
      "How do students collaborate using Classroom repos?"
    ]
  },
  {
    "question": "How do students use GitHub to build and showcase their projects?",
    "answer": "Students can push code, use README.md to describe their work, and deploy projects with GitHub Pages. Tags, branches, and issues can show version control and development process.",
    "tags": [
      "github",
      "students",
      "portfolio",
      "projects"
    ],
    "related": [
      "How do students highlight GitHub in job applications?",
      "How can students use GitHub to collaborate on group projects?"
    ]
  },
  {
    "question": "How do you create an interactive coding tutorial using GitHub repositories?",
    "answer": "Host code snippets, guides, and exercises in Markdown files. Use GitHub Pages with tools like JupyterBook or Docsify. GitHub Actions can validate learner submissions or autograde exercises.",
    "tags": [
      "github",
      "tutorial",
      "interactive",
      "education"
    ],
    "related": [
      "How do you use GitHub for self-paced learning?",
      "How do you turn a repo into a coding course?"
    ]
  },
  {
    "question": "What is the GitHub Education Pack, and how can students benefit from it?",
    "answer": "GitHub Education Pack provides students free access to developer tools, credits for cloud services, and learning resources. It supports project building, resume development, and technical skill growth.",
    "tags": [
      "github",
      "education",
      "students",
      "benefits"
    ],
    "related": [
      "What tools are included in the GitHub Student Pack?",
      "How do you apply for GitHub Education benefits?"
    ]
  },
  {
    "question": "How do you manage test suites for large projects with Git?",
    "answer": "Organize tests in clearly structured directories. Use `.gitignore` to exclude temp test outputs. For parallel testing, use CI tools to run test jobs on branches or PRs. Tag releases with tested versions.",
    "tags": [
      "git",
      "testing",
      "ci",
      "large-projects"
    ],
    "related": [
      "How do you organize large test codebases?",
      "How do you run tests on pull requests automatically?"
    ]
  },
  {
    "question": "How do you use GitHub Actions to run automated tests on pull requests?",
    "answer": "Set up a workflow with `on: pull_request`. Define test scripts in jobs, and use matrix builds to test across environments. Use status checks to block merges until tests pass.",
    "tags": [
      "github",
      "actions",
      "testing",
      "pull-request"
    ],
    "related": [
      "How do you enforce passing tests before merging?",
      "What GitHub Actions are best for testing code?"
    ]
  },
  {
    "question": "How do you test across multiple operating systems using GitHub workflows?",
    "answer": "Use a matrix strategy in GitHub Actions to run jobs on `ubuntu-latest`, `windows-latest`, and `macos-latest`. This ensures cross-platform compatibility of your project.",
    "tags": [
      "github",
      "ci",
      "testing",
      "os-matrix"
    ],
    "related": [
      "How do you test Python apps across OSes with GitHub Actions?",
      "What are OS limitations in GitHub hosted runners?"
    ]
  },
  {
    "question": "How do you track and resolve flaky tests in a collaborative repository?",
    "answer": "Log test failures over time, use retry mechanisms in CI, and tag flaky tests with comments. Tools like `pytest-rerunfailures` or custom job retries help isolate inconsistent behavior.",
    "tags": [
      "git",
      "ci",
      "flaky-tests",
      "collaboration"
    ],
    "related": [
      "How do you auto-retry failing tests in GitHub Actions?",
      "How do you label flaky tests to avoid merging broken code?"
    ]
  },
  {
    "question": "What are strategies for testing merge scenarios in Git?",
    "answer": "Create temporary merge branches locally or in CI to simulate merge results. Run full test suites on the merged state using GitHub Actions\u2019 `pull_request` target with merge commit context.",
    "tags": [
      "git",
      "testing",
      "merge",
      "ci"
    ],
    "related": [
      "How do you validate merge commits before PR merge?",
      "How do you prevent merge conflicts from breaking tests?"
    ]
  },
  {
    "question": "How do you implement a dual-repository workflow (e.g., public and private)?",
    "answer": "Keep sensitive config/code in a private repo and open-source code in public. Use Git submodules or CI scripts to combine during build/deployment. Maintain shared APIs and version control through tags.",
    "tags": [
      "git",
      "workflow",
      "dual-repo",
      "open-source"
    ],
    "related": [
      "How do you split open-source and internal codebases?",
      "How do you sync private and public repos?"
    ]
  },
  {
    "question": "What is the significance of @mentions in GitHub issues and pull requests?",
    "answer": "@mentions notify specific users or teams in issues, PRs, or comments. Use them to request reviews, escalate discussions, or assign tasks. Team mentions require org/team setup in GitHub.",
    "tags": [
      "github",
      "collaboration",
      "mentions",
      "notifications"
    ],
    "related": [
      "How do you create GitHub teams for mentions?",
      "What\u2019s the difference between @user and @org/team?"
    ]
  },
  {
    "question": "How do you manage discussions for RFC (Request for Comments) processes in GitHub?",
    "answer": "Use GitHub Discussions or dedicated issues labeled `RFC`. Structure them with context, motivation, and proposal. Use polls, tags, and threaded replies for feedback. Link to PRs or design docs for traceability.",
    "tags": [
      "github",
      "rfc",
      "discussions",
      "collaboration"
    ],
    "related": [
      "How do you organize community input on GitHub?",
      "What\u2019s the best way to document architectural decisions?"
    ]
  },
  {
    "question": "How do you enforce and monitor contributor guidelines in GitHub projects?",
    "answer": "Create a `CONTRIBUTING.md` file. Use GitHub Actions or bots to check PR titles, commit formats, or test coverage. Display guidelines in issue/PR templates and require compliance before merge.",
    "tags": [
      "github",
      "contribution",
      "guidelines",
      "automation"
    ],
    "related": [
      "How do you auto-check for PR standards?",
      "How do you educate new contributors via templates?"
    ]
  },
  {
    "question": "How do you handle abandoned pull requests in an active repository?",
    "answer": "Set policies for inactivity (e.g., close after 30 days). Use bots like `stale` to auto-tag and comment. Invite maintainers to take over or close PRs if authors are inactive.",
    "tags": [
      "github",
      "pull-request",
      "maintenance",
      "workflow"
    ],
    "related": [
      "How do you automate stale PR management?",
      "What\u2019s GitHub\u2019s best practice for closing inactive PRs?"
    ]
  },
  {
    "question": "How do you set up Git for version control on legacy systems with minimal resources?",
    "answer": "Use lightweight Git installations (like Git from source or BusyBox-compatible Git builds). Disable UI tools, use CLI-only workflows, and avoid large history operations. Use `core.autocrlf=false` and disable fancy diffs for low-resource environments.",
    "tags": [
      "git",
      "legacy",
      "minimal",
      "resources"
    ],
    "related": [
      "How do you run Git on embedded systems?",
      "What are Git best practices for old hardware?"
    ]
  },
  {
    "question": "How do you convert historical codebases from SVN (Subversion) to Git?",
    "answer": "Use `git svn` or `svn2git` to clone SVN history into a Git repository. Map authors using an authors file, and test the resulting structure. Refactor branches and tags to match Git conventions.",
    "tags": [
      "git",
      "svn",
      "migration",
      "conversion"
    ],
    "related": [
      "What tools migrate SVN to Git?",
      "How do you preserve commit history during migration?"
    ]
  },
  {
    "question": "What challenges arise when managing binary files in Git for older systems?",
    "answer": "Binary files bloat repositories and can\u2019t be diffed or merged easily. On legacy systems, they consume excessive storage and memory. Use Git LFS or external hosting when possible.",
    "tags": [
      "git",
      "binary",
      "legacy",
      "performance"
    ],
    "related": [
      "How do you optimize binary file tracking in Git?",
      "What are Git LFS alternatives for constrained systems?"
    ]
  },
  {
    "question": "How do you implement Git workflows in an organization transitioning from older VCS tools?",
    "answer": "Start with basic branching strategies (main + feature), onboard teams with training, and phase in PR-based review. Mirror old VCS to Git during transition and preserve history if feasible.",
    "tags": [
      "git",
      "workflow",
      "migration",
      "vcs"
    ],
    "related": [
      "How do you onboard teams to Git?",
      "What\u2019s the simplest Git workflow for beginners?"
    ]
  },
  {
    "question": "How do you document legacy code effectively in Git-based repositories?",
    "answer": "Use Markdown files, inline comments, and commit messages to explain code behavior. Tag legacy releases and maintain a `docs/legacy/` folder. Use Issues to track questions or refactor plans.",
    "tags": [
      "git",
      "documentation",
      "legacy",
      "maintenance"
    ],
    "related": [
      "How do you maintain changelogs in Git projects?",
      "What are good strategies for documenting old systems?"
    ]
  },
  {
    "question": "How do you use Git for managing episodic content (e.g., podcasts or web series)?",
    "answer": "Use a structured directory per episode (`/season1/ep01`), track scripts, artwork, and metadata in version control. Use Git LFS for audio/video files, and use tags to mark published releases.",
    "tags": [
      "git",
      "media",
      "podcasts",
      "episodic"
    ],
    "related": [
      "How do you manage creative projects with Git?",
      "What\u2019s the best way to version large assets in Git?"
    ]
  },
  {
    "question": "How do you version control digital art projects with multiple layers and iterations?",
    "answer": "Use folders for organized layers or versions (`/v1`, `/v2`). Use Git LFS for large images, and commit progress snapshots. Optionally, export lower-res previews for team feedback.",
    "tags": [
      "git",
      "art",
      "assets",
      "creative"
    ],
    "related": [
      "How do designers collaborate on GitHub?",
      "What tools assist visual diffs for creative assets?"
    ]
  },
  {
    "question": "What are the advantages of using Git to manage interactive educational content?",
    "answer": "Git enables versioning of lesson plans, code examples, and exercises. Teachers can track student submissions via forks or branches. GitHub Pages can publish interactive tutorials and quizzes.",
    "tags": [
      "git",
      "education",
      "interactive",
      "content"
    ],
    "related": [
      "How do you create self-hosted coding courses with Git?",
      "How do you use GitHub for blended learning?"
    ]
  },
  {
    "question": "How do you use Git branches to manage multiple versions of a creative project (e.g., localized versions)?",
    "answer": "Create branches like `main-en`, `main-fr`, etc., or use folders for locale-based structures. Use PRs for localized changes and protect shared assets with `.gitattributes` to avoid merge issues.",
    "tags": [
      "git",
      "localization",
      "branching",
      "creative"
    ],
    "related": [
      "What\u2019s the best structure for multilingual Git projects?",
      "How do you track content changes across languages?"
    ]
  },
  {
    "question": "How do you handle licensing and attribution metadata in Git repositories?",
    "answer": "Include a `LICENSE` file, use SPDX headers in code, and mention attribution in README or file headers. For open-source media, include author credits and usage terms in `meta/` or `credits.md`.",
    "tags": [
      "git",
      "license",
      "metadata",
      "attribution"
    ],
    "related": [
      "How do you comply with open-source license requirements?",
      "Where should you document media rights in Git?"
    ]
  },
  {
    "question": "What are GitHub apps, and how can they extend repository functionality?",
    "answer": "GitHub Apps are integrations that automate tasks, enforce policies, or provide notifications. Examples include CI/CD tools, bots, or code analysis apps. Apps use fine-grained permissions and webhooks.",
    "tags": [
      "github",
      "apps",
      "automation",
      "integration"
    ],
    "related": [
      "What\u2019s the difference between GitHub Apps and OAuth Apps?",
      "How do you install and configure GitHub Apps?"
    ]
  },
  {
    "question": "How do you install and manage GitHub Marketplace applications for a repository?",
    "answer": "Go to GitHub Marketplace, find an app, and install it at the repo or org level. You can configure settings per app and control billing, access scopes, and usage from GitHub Settings > Installed Apps.",
    "tags": [
      "github",
      "marketplace",
      "apps",
      "management"
    ],
    "related": [
      "How do you revoke access for GitHub Apps?",
      "How are GitHub Marketplace apps billed?"
    ]
  },
  {
    "question": "What are some popular GitHub integrations for productivity and project management?",
    "answer": "Popular tools include ZenHub, Linear, Trello, Slack, Jenkins, CircleCI, Sentry, and Codecov. These integrate with PRs, issues, CI, and deployments to streamline workflows.",
    "tags": [
      "github",
      "productivity",
      "integrations",
      "workflow"
    ],
    "related": [
      "How do you connect GitHub to Slack for PR alerts?",
      "What GitHub tools support agile workflows?"
    ]
  },
  {
    "question": "How do you create custom GitHub apps for your organization?",
    "answer": "Register a new GitHub App, define permissions, and provide webhook URLs. Write logic in your backend (e.g., Node.js, Python) using Octokit SDK. Deploy securely with token-based authentication.",
    "tags": [
      "github",
      "apps",
      "custom",
      "sdk"
    ],
    "related": [
      "How do you build a GitHub bot with Octokit?",
      "What permissions do GitHub Apps require?"
    ]
  },
  {
    "question": "How do you audit and manage permissions for installed GitHub apps?",
    "answer": "Go to repository or organization settings, check 'Installed GitHub Apps' and their scopes. Revoke or adjust access per app. Use audit logs in GitHub Enterprise for app-level activity tracking.",
    "tags": [
      "github",
      "permissions",
      "apps",
      "audit"
    ],
    "related": [
      "How do you manage app access across multiple repos?",
      "How do GitHub Apps differ from user tokens?"
    ]
  },
  {
    "question": "How do teachers use Git to track changes in course materials?",
    "answer": "Teachers commit versions of lecture notes, code, and exercises. They tag units or semesters, review diffs to see updates, and collaborate with TAs via branches or forks.",
    "tags": [
      "git",
      "education",
      "tracking",
      "materials"
    ],
    "related": [
      "How do instructors share assignments using Git?",
      "What benefits does Git bring to curriculum design?"
    ]
  },
  {
    "question": "How do architects or engineers use Git to version control CAD files?",
    "answer": "Store CAD source files in organized folders. Use Git LFS for large files, and commit logical updates per milestone. Add render previews for context. Use tags for versioned deliverables.",
    "tags": [
      "git",
      "cad",
      "engineering",
      "lfs"
    ],
    "related": [
      "What are Git workflows for non-code design projects?",
      "How do you manage 3D models in Git?"
    ]
  },
  {
    "question": "How do nonprofits leverage GitHub to manage and collaborate on outreach campaigns?",
    "answer": "Nonprofits use GitHub for organizing campaign websites, donor forms, and content plans. Teams manage tasks via issues or Projects, and automate site deployment using GitHub Pages and Actions.",
    "tags": [
      "github",
      "nonprofit",
      "collaboration",
      "campaigns"
    ],
    "related": [
      "How do you use GitHub for community-driven websites?",
      "What are GitHub Pages examples for nonprofit outreach?"
    ]
  },
  {
    "question": "What are the challenges of using Git to manage legal documents or contracts?",
    "answer": "Legal files are binary or hard to diff semantically. Use Markdown or plaintext formats when possible. Avoid using Git for sensitive, signed documents. Track revisions carefully and restrict access.",
    "tags": [
      "git",
      "legal",
      "documents",
      "versioning"
    ],
    "related": [
      "What formats are Git-friendly for legal content?",
      "How do you version policies securely in Git?"
    ]
  },
  {
    "question": "How do Git and GitHub support collaborative blogging or content creation?",
    "answer": "Writers can collaborate via Markdown, branches, and pull requests. GitHub Pages or static site generators (like Jekyll or Hugo) turn content into live blogs. Git tracks revisions and authorship clearly.",
    "tags": [
      "git",
      "github",
      "blogging",
      "collaboration"
    ],
    "related": [
      "How do you build a collaborative blog with GitHub?",
      "What tools automate publishing via GitHub?"
    ]
  },
  {
    "question": "How do you trigger GitHub Actions workflows with external events (e.g., webhooks)?",
    "answer": "Use the `repository_dispatch` event in your workflow file. From an external system, send a POST request to GitHub\u2019s API with the event type and a valid personal access token. The workflow listens for that custom event to run.",
    "tags": [
      "github",
      "actions",
      "webhooks",
      "automation"
    ],
    "related": [
      "How do you integrate GitHub Actions with external APIs?",
      "What triggers are supported in GitHub Actions?"
    ]
  },
  {
    "question": "How do you cache dependencies in GitHub Actions to speed up workflows?",
    "answer": "Use the `actions/cache` action to store dependencies like `node_modules`, `pip`, or `maven` folders. Define key and path. Cached files will persist between jobs or workflow runs, improving build time.",
    "tags": [
      "github",
      "actions",
      "cache",
      "performance"
    ],
    "related": [
      "How do you invalidate a GitHub Actions cache?",
      "What are best practices for caching dependencies?"
    ]
  },
  {
    "question": "How do you implement multi-step workflows with conditional execution in GitHub Actions?",
    "answer": "Use `if:` conditions for each job or step. You can check previous step outputs using `steps.step_id.outputs.key` or status variables like `success()` and `failure()`. This controls execution flow based on logic.",
    "tags": [
      "github",
      "actions",
      "conditions",
      "workflow"
    ],
    "related": [
      "How do you skip steps in GitHub Actions?",
      "What\u2019s the syntax for conditional jobs?"
    ]
  },
  {
    "question": "How do you use GitHub Actions to automate backups of critical repositories?",
    "answer": "Schedule workflows using `on: schedule` with a cron job. Use `git clone`, `tar`, or `gh` CLI to archive and upload to cloud storage (S3, GDrive) or another repo. Store encrypted secrets securely.",
    "tags": [
      "github",
      "actions",
      "backup",
      "automation"
    ],
    "related": [
      "How do you create automated GitHub repo snapshots?",
      "What are secure ways to backup Git repositories?"
    ]
  },
  {
    "question": "How do you create reusable workflows for recurring tasks in GitHub Actions?",
    "answer": "Create a workflow in `.github/workflows/` with `workflow_call` enabled. In other repos, call this workflow using `uses:`. Pass inputs and secrets to customize behavior while keeping logic centralized.",
    "tags": [
      "github",
      "actions",
      "reusable",
      "workflow"
    ],
    "related": [
      "What are benefits of reusable workflows in GitHub?",
      "How do you call one workflow from another?"
    ]
  },
  {
    "question": "How do you manage and rotate SSH keys securely for Git repositories?",
    "answer": "Use key pairs with passphrases. Store private keys in encrypted CI secrets. Rotate keys periodically, remove old keys from services like GitHub, and restrict access by IP or scope.",
    "tags": [
      "git",
      "ssh",
      "security",
      "rotation"
    ],
    "related": [
      "How do you automate SSH key rotation?",
      "How do you use SSH with GitHub Actions?"
    ]
  },
  {
    "question": "How do you conduct a repository security audit for open-source projects?",
    "answer": "Enable GitHub\u2019s built-in security features like code scanning, secret scanning, and Dependabot. Review permission scopes, contributor activity, and workflow files. Audit third-party apps and API access regularly.",
    "tags": [
      "github",
      "security",
      "audit",
      "open-source"
    ],
    "related": [
      "How do you enable code scanning in GitHub?",
      "What should be reviewed during a security audit?"
    ]
  },
  {
    "question": "What best practices exist for handling API keys or passwords in Git repositories?",
    "answer": "Never commit credentials to Git. Use `.gitignore` to exclude secrets. Store them in encrypted secrets (e.g., GitHub Secrets), use environment variables, and scan repos with secret detectors.",
    "tags": [
      "git",
      "security",
      "secrets",
      "best-practices"
    ],
    "related": [
      "How do you manage secrets in GitHub Actions?",
      "What tools detect hardcoded secrets in Git?"
    ]
  },
  {
    "question": "How do you scan repositories for malware or malicious code using Git tools?",
    "answer": "Use tools like CodeQL, Trivy, or `git-secrets`. Static analysis and dependency vulnerability scanners can detect malicious patterns. Run scans in CI/CD and use verified dependencies only.",
    "tags": [
      "git",
      "security",
      "malware",
      "scanning"
    ],
    "related": [
      "How do you integrate CodeQL with GitHub?",
      "What Git tools help detect vulnerabilities?"
    ]
  },
  {
    "question": "How do you manage access controls and permissions for contributors in sensitive projects?",
    "answer": "Use branch protection rules, code owners, and team-based access roles in GitHub. Require 2FA, enforce signed commits, and use audit logs or SSO for enterprise-grade control.",
    "tags": [
      "github",
      "permissions",
      "security",
      "access-control"
    ],
    "related": [
      "What are best practices for GitHub org permissions?",
      "How do you protect production branches?"
    ]
  },
  {
    "question": "How do you use GitHub Insights to track code churn rates?",
    "answer": "Use the GitHub Insights dashboard (available in Team/Enterprise plans) to view file-level commit frequency and PR activity. Identify unstable files that change often and may need refactoring.",
    "tags": [
      "github",
      "insights",
      "metrics",
      "code-churn"
    ],
    "related": [
      "What does code churn indicate in a project?",
      "How do you reduce unnecessary churn in Git?"
    ]
  },
  {
    "question": "How do you measure the impact of new features on a repository's activity?",
    "answer": "Track issues opened/closed, PRs merged, stars/forks, and contributor count after feature releases. Use GitHub Insights, release tagging, and custom analytics dashboards with GitHub\u2019s API.",
    "tags": [
      "github",
      "metrics",
      "features",
      "analytics"
    ],
    "related": [
      "How do you measure feature success on GitHub?",
      "What metrics indicate healthy repo engagement?"
    ]
  },
  {
    "question": "How do you analyze contribution patterns for seasonal trends?",
    "answer": "Use GitHub\u2019s contributor graphs or extract data via the API to analyze activity by week/month. Visualize trends in tools like Power BI or Grafana to spot spikes during events or downtime.",
    "tags": [
      "github",
      "contributions",
      "analysis",
      "seasonality"
    ],
    "related": [
      "How do you monitor open-source contributor trends?",
      "What APIs show activity timelines in GitHub?"
    ]
  },
  {
    "question": "How do you identify 'hot spots' in the codebase that frequently require changes?",
    "answer": "Analyze commit history with `git log --stat`, or use tools like `git-quick-stats`, CodeScene, or SonarQube. GitHub\u2019s Insights can also help reveal frequently changed files or PRs.",
    "tags": [
      "git",
      "analysis",
      "hotspots",
      "code-review"
    ],
    "related": [
      "What tools help detect fragile code in Git?",
      "How do you use Git data to refactor hotspots?"
    ]
  },
  {
    "question": "How do you create custom dashboards to visualize repository metrics?",
    "answer": "Use the GitHub REST or GraphQL APIs to extract metrics like commits, PRs, issues, and releases. Feed data into visualization tools like Power BI, Tableau, or Grafana for real-time monitoring.",
    "tags": [
      "github",
      "metrics",
      "dashboard",
      "api"
    ],
    "related": [
      "What GitHub APIs support repo analytics?",
      "How do you integrate GitHub data with Grafana?"
    ]
  },
  {
    "question": "How do you set up hooks to enforce naming conventions for branches?",
    "answer": "Use `pre-push` or `pre-commit` hooks to validate branch names using regex patterns. You can also enforce naming via CI workflows and reject PRs with non-compliant branch names.",
    "tags": [
      "git",
      "hooks",
      "naming",
      "conventions"
    ],
    "related": [
      "How do you write custom pre-push Git hooks?",
      "Can GitHub enforce branch naming policies?"
    ]
  },
  {
    "question": "How do you automate the resolution of common merge conflicts in Git?",
    "answer": "Use `git rerere` (reuse recorded resolution) to remember past conflict resolutions. Combine this with automation scripts or CI to pre-resolve known conflict patterns in frequently merged files.",
    "tags": [
      "git",
      "merge",
      "conflict",
      "automation"
    ],
    "related": [
      "How do you enable and use git rerere?",
      "What tools reduce merge conflicts in teams?"
    ]
  },
  {
    "question": "How do you schedule automated code cleanups using Git workflows?",
    "answer": "Use GitHub Actions with a scheduled cron trigger to run formatters (like Prettier or Black) and linters. You can auto-commit cleanup changes or raise a PR for review.",
    "tags": [
      "github",
      "automation",
      "cleanup",
      "lint"
    ],
    "related": [
      "How do you format code automatically with GitHub Actions?",
      "How do you schedule repo maintenance tasks?"
    ]
  },
  {
    "question": "How do you automate tagging and releasing versions based on commit messages?",
    "answer": "Use semantic-release or conventional-changelog with GitHub Actions to parse commit messages, bump versions, create tags, and publish releases automatically based on the commit history.",
    "tags": [
      "github",
      "release",
      "versioning",
      "automation"
    ],
    "related": [
      "How do you use semantic versioning in Git?",
      "How do you auto-generate changelogs from commits?"
    ]
  },
  {
    "question": "How do you integrate Git automation tools with cloud platforms?",
    "answer": "Use CI/CD pipelines like GitHub Actions, CircleCI, or Jenkins with cloud provider CLIs (e.g., AWS CLI, GCP SDK). Authenticate with secrets and automate deployment, monitoring, or cleanup tasks.",
    "tags": [
      "git",
      "cloud",
      "automation",
      "ci/cd"
    ],
    "related": [
      "How do you deploy GitHub repos to AWS automatically?",
      "How do you use GitHub with GCP and Azure?"
    ]
  },
  {
    "question": "How do you recover from a repository corruption caused by interrupted processes?",
    "answer": "Use `git fsck` to identify corruption, restore from backups or clone a clean remote. Rebuild missing refs with `reflog` or recreate the `.git` folder by reinitializing if needed.",
    "tags": [
      "git",
      "corruption",
      "recovery",
      "fsck"
    ],
    "related": [
      "How do you use git reflog to restore lost commits?",
      "What are signs of repository corruption in Git?"
    ]
  },
  {
    "question": "How do you restore lost changes after a failed git stash operation?",
    "answer": "Run `git fsck --lost-found` or `git reflog` to find stash-related commits. You may locate the stash as a dangling commit and recover it by creating a new branch from the commit hash.",
    "tags": [
      "git",
      "stash",
      "recovery",
      "lost-changes"
    ],
    "related": [
      "How do you apply a deleted stash in Git?",
      "Can you recover from git stash drop?"
    ]
  },
  {
    "question": "How do you diagnose and repair errors in refs files in the .git directory?",
    "answer": "Check `.git/refs/heads/` and `.git/packed-refs` for syntax issues or missing files. Use `git show-ref` to inspect refs, and recreate or reset corrupted branches using backup hashes.",
    "tags": [
      "git",
      "refs",
      "errors",
      "repair"
    ],
    "related": [
      "How do you fix a broken HEAD reference in Git?",
      "What are Git ref errors and how to resolve them?"
    ]
  },
  {
    "question": "How do you resolve issues caused by missing .gitignore configurations?",
    "answer": "Review tracked unwanted files with `git ls-files`. Add them to `.gitignore`, then remove with `git rm --cached`. Commit and push the changes to apply ignore rules going forward.",
    "tags": [
      "git",
      "gitignore",
      "cleanup",
      "tracking"
    ],
    "related": [
      "How do you retroactively apply .gitignore?",
      "How do you ignore generated files in Git?"
    ]
  },
  {
    "question": "How do you recover from accidentally overwriting the main branch with a force push?",
    "answer": "Use `git reflog` on local and remote to find the previous commit hash. Create a new branch or reset the main branch to that hash using `git reset --hard <hash>` and force-push it back.",
    "tags": [
      "git",
      "recovery",
      "reflog",
      "force-push"
    ],
    "related": [
      "How do you undo git push --force?",
      "Can you recover deleted commits after push?"
    ]
  },
  {
    "question": "How do you manage repositories with thousands of contributors efficiently?",
    "answer": "Use GitHub Teams, code owners, and protected branches. Automate CI/CD checks, use GitHub Discussions to reduce noise, and archive stale issues regularly to maintain performance.",
    "tags": [
      "github",
      "scaling",
      "contributors",
      "management"
    ],
    "related": [
      "How do you handle PR overload in large repos?",
      "What governance tools help scale GitHub?"
    ]
  },
  {
    "question": "How do you use git bisect to debug large codebases?",
    "answer": "Run `git bisect start`, mark a bad and good commit, and Git will walk through commits to isolate the one that introduced a bug. Automate tests with `git bisect run <script>`.",
    "tags": [
      "git",
      "debugging",
      "bisect",
      "automation"
    ],
    "related": [
      "What are best practices for using git bisect?",
      "How do you automate bisect with test scripts?"
    ]
  },
  {
    "question": "How do you version control massive documentation repositories?",
    "answer": "Split docs by sections or products, use branches for language/localized content, and tag releases with versioned docs. Static site generators + GitHub Pages offer scalable publishing.",
    "tags": [
      "git",
      "docs",
      "versioning",
      "scale"
    ],
    "related": [
      "How do you publish docs with GitHub Pages?",
      "How do you structure Git repos for documentation?"
    ]
  },
  {
    "question": "How do you implement team-specific workflows in multi-team repositories?",
    "answer": "Use subdirectories, codeowners for review enforcement, and GitHub Actions to apply custom workflows per path. Tag teams in issues/PRs using `@org/team` and define branch naming conventions.",
    "tags": [
      "github",
      "workflow",
      "multi-team",
      "collaboration"
    ],
    "related": [
      "How do teams share a monorepo effectively?",
      "What naming conventions help manage teams?"
    ]
  },
  {
    "question": "How do you manage cross-repository dependencies for large organizations?",
    "answer": "Use Git submodules, subtrees, or package managers (npm, pip, etc.) to manage dependencies. Automate updates with bots like Renovate or Dependabot, and document version requirements in README or lockfiles.",
    "tags": [
      "git",
      "dependencies",
      "cross-repo",
      "organization"
    ],
    "related": [
      "What are the pros/cons of submodules vs subtrees?",
      "How do you manage internal package registries?"
    ]
  },
  {
    "question": "How do you integrate GitHub repositories with monitoring tools like Prometheus?",
    "answer": "Expose GitHub event metrics via API or webhook receivers that forward to Prometheus exporters. Use middleware like Prometheus Pushgateway or create custom exporters to track repo stats.",
    "tags": [
      "github",
      "monitoring",
      "prometheus",
      "metrics"
    ],
    "related": [
      "How do you monitor PR/issue activity with Prometheus?",
      "Can GitHub send data to Grafana or Prometheus?"
    ]
  },
  {
    "question": "How do you use GitHub API to manage user access across multiple repositories?",
    "answer": "Use the GitHub REST or GraphQL API to list team memberships, assign collaborators, and audit permissions. For organizations, manage team-to-repo assignments via the `/orgs/:org/teams/:team/repos/:repo` endpoint.",
    "tags": [
      "github",
      "api",
      "access",
      "automation"
    ],
    "related": [
      "How do you automate GitHub org member audits?",
      "What APIs manage GitHub Teams programmatically?"
    ]
  },
  {
    "question": "How do you integrate GitHub Issues with agile boards like Kanban or Scrum?",
    "answer": "Use GitHub Projects or integrations like ZenHub or Linear. Track progress by dragging issues between columns, use labels for epics/stories, and automate status updates via actions or bots.",
    "tags": [
      "github",
      "issues",
      "agile",
      "kanban"
    ],
    "related": [
      "How do you turn GitHub into a Scrum board?",
      "What tools extend GitHub Issues for agile teams?"
    ]
  },
  {
    "question": "How do you generate automated repository activity reports using GitHub tools?",
    "answer": "Use `git log`, `gh` CLI, or GitHub API to fetch activity data. Schedule scripts or workflows to summarize contributions, PRs, and issues. Visualize results in CSV or dashboards.",
    "tags": [
      "github",
      "reporting",
      "automation",
      "metrics"
    ],
    "related": [
      "How do you track team activity in GitHub?",
      "Can GitHub Actions create contribution reports?"
    ]
  },
  {
    "question": "How do you handle complex webhook configurations for multi-repository systems?",
    "answer": "Use a central webhook handler with a routing layer that identifies the repo and event type. Filter actions by repo name or payload, and ensure idempotent processing to avoid duplication.",
    "tags": [
      "github",
      "webhooks",
      "multi-repo",
      "integration"
    ],
    "related": [
      "How do you route GitHub webhooks for multiple projects?",
      "What\u2019s the best practice for webhook scalability?"
    ]
  },
  {
    "question": "How do you use git replace to substitute commits in a repository?",
    "answer": "`git replace <old-commit> <new-commit>` temporarily rewrites history by substituting an object. This is useful for testing or reparenting trees without permanent rebases. Replacements are local unless rewritten permanently.",
    "tags": [
      "git",
      "replace",
      "commits",
      "history"
    ],
    "related": [
      "What\u2019s the difference between replace and rebase?",
      "Can you undo git replace changes?"
    ]
  },
  {
    "question": "What are shallow clones, and how do you configure them for specific workflows?",
    "answer": "Shallow clones (`--depth 1`) download only recent history. They're useful in CI/CD to speed up cloning. Combine with `--single-branch` or `--filter=blob:none` for optimal performance.",
    "tags": [
      "git",
      "clone",
      "shallow",
      "performance"
    ],
    "related": [
      "How do shallow clones impact GitHub Actions?",
      "What are limitations of shallow Git history?"
    ]
  },
  {
    "question": "How do you optimize Git pull operations for repositories with large histories?",
    "answer": "Use shallow clones to limit history. Enable partial clone support on GitHub. Pull only needed branches or directories using sparse checkout or `git pull --depth=1`.",
    "tags": [
      "git",
      "performance",
      "pull",
      "history"
    ],
    "related": [
      "How do you speed up Git operations for monorepos?",
      "What is sparse checkout and how does it work?"
    ]
  },
  {
    "question": "How do you debug commit chain anomalies using git rev-parse?",
    "answer": "Use `git rev-parse HEAD`, `HEAD~1`, or custom refs to inspect commit ancestry. It helps validate scripts and resolve references in CI pipelines. Combine with `git show` or `git cat-file` for deeper analysis.",
    "tags": [
      "git",
      "debugging",
      "rev-parse",
      "commits"
    ],
    "related": [
      "How do you inspect commit trees in Git?",
      "What are Git revision specifiers?"
    ]
  },
  {
    "question": "How do you configure Git to handle large binary files efficiently?",
    "answer": "Use Git LFS to track large files without bloating history. Add patterns to `.gitattributes`, install Git LFS hooks, and monitor storage usage. Use `.gitignore` to avoid tracking build artifacts.",
    "tags": [
      "git",
      "lfs",
      "binary",
      "optimization"
    ],
    "related": [
      "What are alternatives to Git LFS?",
      "How do you manage large design files in Git?"
    ]
  },
  {
    "question": "How do you set up repository synchronization across geographically distributed teams?",
    "answer": "Use mirror repositories hosted in different regions, GitHub\u2019s geo-replication (for Enterprise), or self-hosted Git servers. Encourage shallow clones and partial clones to reduce fetch time.",
    "tags": [
      "git",
      "sync",
      "distributed",
      "teams"
    ],
    "related": [
      "How do you speed up Git operations across regions?",
      "What are the best practices for multi-region Git access?"
    ]
  },
  {
    "question": "How do you manage repository forks for open-source projects?",
    "answer": "Encourage contributors to fork and PR from their copy. Use labels and GitHub Actions to automate reviews. Keep forks synced using upstream remotes or actions like `pull from upstream`.",
    "tags": [
      "github",
      "forks",
      "open-source",
      "workflow"
    ],
    "related": [
      "How do you sync a fork with the main repository?",
      "How do you manage many contributors using forks?"
    ]
  },
  {
    "question": "How do you track contributions across distributed repositories with GitHub Insights?",
    "answer": "GitHub Insights (Enterprise feature) aggregates metrics across repositories. Use GitHub's REST/GraphQL API to build dashboards tracking commits, PRs, and contributor activity across projects.",
    "tags": [
      "github",
      "insights",
      "metrics",
      "contributors"
    ],
    "related": [
      "How do you analyze organization-wide contributions?",
      "What tools help centralize multi-repo activity?"
    ]
  },
  {
    "question": "What are best practices for managing regional repositories in large organizations?",
    "answer": "Keep the canonical source in one repo and mirror it regionally. Use automation for sync, limit write access to one source, and configure region-specific CI/CD pipelines if needed.",
    "tags": [
      "git",
      "regional",
      "enterprise",
      "mirrors"
    ],
    "related": [
      "How do you avoid divergence in regional repos?",
      "What are scalable repo strategies across regions?"
    ]
  },
  {
    "question": "How do you implement multi-timezone workflows in GitHub Actions?",
    "answer": "Use scheduled workflows (`on: schedule`) with UTC-based cron jobs. Adjust based on contributor location. For more dynamic timezone handling, pass custom time logic in scripts.",
    "tags": [
      "github",
      "actions",
      "timezone",
      "workflow"
    ],
    "related": [
      "How do you trigger workflows based on local time?",
      "How do you coordinate CI across timezones?"
    ]
  },
  {
    "question": "How do you use Git tags to trigger specific deployment pipelines?",
    "answer": "Configure workflows with `on: push: tags:` in GitHub Actions. Match semantic versions like `v*.*.*` to trigger production deployments when a tag is pushed.",
    "tags": [
      "git",
      "tags",
      "deployment",
      "ci/cd"
    ],
    "related": [
      "How do you automate deployments with version tags?",
      "How do GitHub Actions detect tagged commits?"
    ]
  },
  {
    "question": "How do you automate rollback scenarios using Git branches?",
    "answer": "Maintain rollback branches (e.g. `rollback/<release>`) pointing to last known-good commits. Automate restoration by triggering redeploy workflows using these branches.",
    "tags": [
      "git",
      "rollback",
      "ci/cd",
      "branches"
    ],
    "related": [
      "How do you revert production with Git?",
      "What rollback strategies work in CI/CD?"
    ]
  },
  {
    "question": "How do you integrate Git with container orchestration tools like Docker Compose?",
    "answer": "Store `docker-compose.yml` in your repo. Use GitHub Actions to trigger `docker-compose up` for dev/test. Version environment configs, and tag builds alongside Git versions.",
    "tags": [
      "git",
      "docker",
      "compose",
      "ci"
    ],
    "related": [
      "How do you automate container builds with GitHub?",
      "How do you use Git branches with Docker configs?"
    ]
  },
  {
    "question": "How do you manage configuration files for continuous delivery workflows in Git?",
    "answer": "Keep environment-specific configs in version-controlled directories. Use `.env` files ignored by Git, or secrets managers. Parameterize CI pipelines to pick configs per branch or tag.",
    "tags": [
      "git",
      "ci/cd",
      "config",
      "workflow"
    ],
    "related": [
      "How do you secure configs in Git-based CD?",
      "How do you manage staging vs prod settings in Git?"
    ]
  },
  {
    "question": "How do you enforce deployment rules using server-side Git hooks?",
    "answer": "Configure server-side `pre-receive` or `update` hooks to restrict branch pushes, validate commit messages, or block unauthorized deploys. Combine with audit logs and webhook alerts.",
    "tags": [
      "git",
      "hooks",
      "deployment",
      "security"
    ],
    "related": [
      "What Git hooks control remote deployment behavior?",
      "How do you implement server-side commit validation?"
    ]
  },
  {
    "question": "How do you implement repository policies in GitHub Enterprise?",
    "answer": "Use branch protection, required status checks, code review enforcement, and SAML SSO. Use audit logs to monitor activity and restrict actions like force-pushes or admin changes.",
    "tags": [
      "github",
      "enterprise",
      "policy",
      "security"
    ],
    "related": [
      "How do you enforce commit signing in GitHub?",
      "What compliance features are in GitHub Enterprise?"
    ]
  },
  {
    "question": "How do you manage compliance workflows using GitHub Insights?",
    "answer": "Track activity logs, PR approvals, and testing coverage via GitHub Insights. Integrate third-party compliance tools or export logs via API for audit trail generation and reporting.",
    "tags": [
      "github",
      "compliance",
      "insights",
      "audit"
    ],
    "related": [
      "How do you prepare GitHub repos for audits?",
      "How do you monitor policy adherence in GitHub?"
    ]
  },
  {
    "question": "How do you configure repository archiving for GitHub Enterprise?",
    "answer": "Mark repos as archived via API or UI to make them read-only. Automate archiving based on inactivity or project closure using GitHub Actions or scheduled audits.",
    "tags": [
      "github",
      "archive",
      "enterprise",
      "lifecycle"
    ],
    "related": [
      "How do you automate repository lifecycle in GitHub?",
      "What happens when a repo is archived in GitHub?"
    ]
  },
  {
    "question": "How do you enforce user-level access controls in GitHub Enterprise repositories?",
    "answer": "Assign users to teams with repo-level permissions. Use branch protections, review requirements, and SSO-based access management. Audit access with the enterprise dashboard.",
    "tags": [
      "github",
      "access-control",
      "permissions",
      "enterprise"
    ],
    "related": [
      "What\u2019s the difference between repo and org roles?",
      "How do you review user permissions across repos?"
    ]
  },
  {
    "question": "How do you use GitHub Enterprise Insights for audit trails and compliance tracking?",
    "answer": "GitHub Enterprise Insights provides visibility into commit activity, reviews, and pushes. Use it to generate audit trails, identify non-compliance, and export reports for review.",
    "tags": [
      "github",
      "audit",
      "compliance",
      "enterprise"
    ],
    "related": [
      "How do you create automated audit reports?",
      "What compliance tools integrate with GitHub?"
    ]
  },
  {
    "question": "How do you track detailed changes across submodules in large repositories?",
    "answer": "Use `git submodule status` and `git diff` to track SHA changes. Automate alerts via CI if submodules change. Maintain consistency by pinning versions and checking for drift regularly.",
    "tags": [
      "git",
      "submodules",
      "tracking",
      "large-repo"
    ],
    "related": [
      "How do you lock submodule versions securely?",
      "What tools detect submodule mismatches?"
    ]
  },
  {
    "question": "How do you use git diff effectively for binary files?",
    "answer": "Enable textual diff tools for known formats or use external diff tools like `git diff --binary` or `diffoscope`. Use Git attributes to mark certain binary types as text when possible.",
    "tags": [
      "git",
      "diff",
      "binary",
      "tools"
    ],
    "related": [
      "How do you compare PDF or image diffs in Git?",
      "What tools extend git diff for binary support?"
    ]
  },
  {
    "question": "How do you combine git log and git blame to identify critical changes in history?",
    "answer": "Use `git blame <file>` to find who last changed a line, then use `git log -L` or `git log --follow` to trace history. Combine with `--patch` to see the full change context.",
    "tags": [
      "git",
      "blame",
      "log",
      "debugging"
    ],
    "related": [
      "How do you trace bug origins using Git?",
      "What\u2019s the difference between log and blame?"
    ]
  },
  {
    "question": "How do you trace the origin of specific configuration changes using Git?",
    "answer": "Use `git blame` and `git log -L` on config files to see who made the change and why. Tag significant config updates and link to relevant issues or PRs for context.",
    "tags": [
      "git",
      "config",
      "history",
      "blame"
    ],
    "related": [
      "How do you audit config changes over time?",
      "How do you correlate config edits with bugs?"
    ]
  },
  {
    "question": "How do you implement tracking for large cross-repository feature changes?",
    "answer": "Create tracking issues or a project board. Use shared labels and milestones across repositories. Reference commits/PRs with cross-links, and summarize updates in a central meta-issue.",
    "tags": [
      "github",
      "cross-repo",
      "tracking",
      "features"
    ],
    "related": [
      "How do you organize multi-repo projects?",
      "What are best practices for tracking large features?"
    ]
  },
  {
    "question": "How do you use GitHub Actions to automatically assign labels based on issue content?",
    "answer": "Use GitHub Actions with a labeler workflow or a custom script that parses issue body or title. Tools like `actions/labeler` or `probot/auto-label` can apply labels based on patterns or paths.",
    "tags": [
      "github",
      "actions",
      "labels",
      "automation"
    ],
    "related": [
      "How do you auto-label pull requests in GitHub?",
      "Can labels be assigned conditionally in workflows?"
    ]
  },
  {
    "question": "How do you create a workflow that triggers deployments only on specific tag creations?",
    "answer": "Configure `on: push: tags:` in your GitHub Actions file and filter with a pattern (e.g., `v*.*.*`). Only pushes that match this tag format will trigger the deployment job.",
    "tags": [
      "github",
      "ci/cd",
      "tags",
      "deployment"
    ],
    "related": [
      "How do semantic version tags trigger workflows?",
      "How do you prevent accidental deploys on wrong tags?"
    ]
  },
  {
    "question": "How can you set up GitHub Actions to notify teams via Slack on repository updates?",
    "answer": "Use the Slack Incoming Webhooks app and configure a GitHub Actions step using `curl` or a prebuilt Slack action. Trigger on push, PR, or release events to send formatted messages to a channel.",
    "tags": [
      "github",
      "slack",
      "notifications",
      "integration"
    ],
    "related": [
      "How do you integrate GitHub with Discord or Teams?",
      "What GitHub Actions send alerts to messaging platforms?"
    ]
  },
  {
    "question": "How do you use Git hooks to trigger external scripts for analytics?",
    "answer": "Add client-side hooks (e.g., `post-commit`) or server-side hooks (e.g., `post-receive`) that call scripts to log data, push metrics to monitoring systems, or store commit stats externally.",
    "tags": [
      "git",
      "hooks",
      "analytics",
      "automation"
    ],
    "related": [
      "What\u2019s the difference between client and server Git hooks?",
      "How do you capture commit metadata in analytics tools?"
    ]
  },
  {
    "question": "How do you configure event-driven repository mirroring across different platforms?",
    "answer": "Use webhooks or CI workflows to detect changes in one repository and trigger a sync script that pushes to a mirror on another platform (e.g., GitHub to GitLab). Handle push conflicts carefully.",
    "tags": [
      "git",
      "mirroring",
      "multi-platform",
      "sync"
    ],
    "related": [
      "How do you keep forks or mirrors in sync?",
      "What CI tools support cross-platform Git sync?"
    ]
  },
  {
    "question": "How do you override Git configurations for specific repositories without changing the global settings?",
    "answer": "Use local config with `git config --local`. Repository-specific settings are stored in `.git/config`, allowing customization of remotes, hooks, or aliases independently of global config.",
    "tags": [
      "git",
      "config",
      "local",
      "repository"
    ],
    "related": [
      "Where are Git configuration levels stored?",
      "How do you apply custom settings per project?"
    ]
  },
  {
    "question": "What is the purpose of the core.autocrlf setting in Git, and how does it affect file compatibility?",
    "answer": "`core.autocrlf` handles line-ending conversion. On Windows, set to `true` to convert CRLF to LF on commit. On macOS/Linux, use `input` to prevent CRLF issues when collaborating cross-platform.",
    "tags": [
      "git",
      "crlf",
      "line-endings",
      "compatibility"
    ],
    "related": [
      "How do you avoid CRLF line-ending issues in teams?",
      "What does core.safecrlf do in Git?"
    ]
  },
  {
    "question": "How do you enforce consistent file permissions in a Git repository using .gitattributes?",
    "answer": "Use `.gitattributes` to track files and attributes, but Git doesn\u2019t version file permissions (besides executable bit). Use `chmod +x` and `git update-index --chmod=+x` for scripts when needed.",
    "tags": [
      "git",
      "permissions",
      "attributes",
      "chmod"
    ],
    "related": [
      "What permission settings does Git track?",
      "How do you make a script executable in Git?"
    ]
  },
  {
    "question": "How do you configure Git to ignore whitespace changes when comparing commits?",
    "answer": "Use `git diff -b` (ignore space) or `git diff -w` (ignore all whitespace). You can also configure merge drivers or `.gitattributes` to ignore formatting changes during merges.",
    "tags": [
      "git",
      "whitespace",
      "diff",
      "merge"
    ],
    "related": [
      "How do you configure Git to show only real code changes?",
      "Can whitespace-only changes be excluded in merges?"
    ]
  },
  {
    "question": "How do you implement conditional configurations in Git for different operating systems?",
    "answer": "Use conditional includes in `.gitconfig` with `[includeIf \"platform:...\"].path` to load platform-specific config files. This allows you to apply custom settings per OS.",
    "tags": [
      "git",
      "config",
      "os",
      "conditional"
    ],
    "related": [
      "How do you maintain cross-platform Git setups?",
      "What\u2019s the use of includeIf in Git configuration?"
    ]
  },
  {
    "question": "How do you visualize repository commit history using third-party tools?",
    "answer": "Use tools like GitKraken, Sourcetree, or `git log --graph` in CLI. You can also export commit logs and feed them into visualization tools like Gource or custom dashboards.",
    "tags": [
      "git",
      "history",
      "visualization",
      "tools"
    ],
    "related": [
      "How do you render a commit tree graph?",
      "What apps provide GUI views for Git history?"
    ]
  },
  {
    "question": "What are the advantages of using git log --graph for understanding branching structures?",
    "answer": "`git log --graph` visually shows branches and merges, helping you understand the flow of commits across branches. Combine with `--oneline` and `--all` for clarity.",
    "tags": [
      "git",
      "log",
      "branches",
      "visual"
    ],
    "related": [
      "What are useful flags with git log?",
      "How do you trace branching history with Git?"
    ]
  },
  {
    "question": "How do you track branching complexity in large repositories using visualization plugins?",
    "answer": "Use plugins for Git GUI tools or CI integrations that display merge trees. GitHub\u2019s Network Graph or tools like GitHub Insights and Gitk can also visualize branch relationships.",
    "tags": [
      "git",
      "branches",
      "visualization",
      "complexity"
    ],
    "related": [
      "What tools visualize branch merge complexity?",
      "How do you manage complex branching patterns?"
    ]
  },
  {
    "question": "How do you generate custom visual diagrams for Git workflows?",
    "answer": "Use Mermaid.js in markdown files (supported in GitHub), or draw.io for diagrams. Tools like GitGraph.js or D3.js can generate interactive Git commit graphs and branching flowcharts.",
    "tags": [
      "git",
      "visualization",
      "workflow",
      "diagrams"
    ],
    "related": [
      "How do you document Git processes visually?",
      "What GitHub features support workflow diagrams?"
    ]
  },
  {
    "question": "How do you analyze commit patterns across contributors using graphs?",
    "answer": "Use `git shortlog`, GitHub contributor graphs, or pull data via API for visualization. Show metrics like frequency, time of day, or per-file contributions using Power BI or Grafana.",
    "tags": [
      "git",
      "analysis",
      "contributors",
      "graphs"
    ],
    "related": [
      "How do you generate commit heatmaps?",
      "What GitHub features track contributor activity?"
    ]
  },
  {
    "question": "How do researchers version control large datasets and scripts using Git?",
    "answer": "Track code and metadata in Git, use Git LFS or DVC for large files. Create branches for experiments, tag releases, and document preprocessing steps in versioned notebooks or scripts.",
    "tags": [
      "git",
      "research",
      "data",
      "versioning"
    ],
    "related": [
      "How do you use Git with machine learning projects?",
      "What are best practices for scientific Git repos?"
    ]
  },
  {
    "question": "How do you use GitHub to manage collaborative research across institutions?",
    "answer": "Create an organization with separate repos per paper/project. Use protected branches, GitHub Projects, and PRs for collaboration. Assign roles for labs or institutions and use Discussions for communication.",
    "tags": [
      "github",
      "research",
      "collaboration",
      "projects"
    ],
    "related": [
      "How do universities use GitHub for research?",
      "What GitHub features support scientific teamwork?"
    ]
  },
  {
    "question": "How do you leverage GitHub Pages for publishing academic papers and projects?",
    "answer": "Use Jekyll or a static site generator to publish papers, data, and project summaries on GitHub Pages. Push changes to `main` or `gh-pages` and customize with themes or HTML templates.",
    "tags": [
      "github",
      "pages",
      "academic",
      "publishing"
    ],
    "related": [
      "How do you host a research website on GitHub?",
      "What static site tools work best for academics?"
    ]
  },
  {
    "question": "How do you structure a repository for reproducible scientific experiments?",
    "answer": "Use folders like `/data`, `/src`, `/notebooks`, `/results`, and `/docs`. Track environments with `environment.yml` or `requirements.txt`. Store data with Git LFS or link to open data portals.",
    "tags": [
      "git",
      "science",
      "reproducibility",
      "structure"
    ],
    "related": [
      "How do you set up Git for a research pipeline?",
      "What repo layout works best for experiments?"
    ]
  },
  {
    "question": "How do you track changes in research methodologies using Git commit history?",
    "answer": "Use descriptive commit messages and branches for major design shifts. Tag protocol changes and include rationale in PRs or commit messages. Link related issues for traceability.",
    "tags": [
      "git",
      "research",
      "methodology",
      "history"
    ],
    "related": [
      "How do you document process changes in Git?",
      "Can Git commit logs support scientific reproducibility?"
    ]
  },
  {
    "question": "How do you implement Git protocol v2 for optimized fetch operations?",
    "answer": "Git protocol v2 is enabled by default in recent Git versions. It reduces data sent during fetch and clone. You can enforce it via `git config --global protocol.version 2`.",
    "tags": [
      "git",
      "protocol",
      "performance",
      "network"
    ],
    "related": [
      "What\u2019s the difference between Git protocol v1 and v2?",
      "How do you optimize Git fetch operations?"
    ]
  },
  {
    "question": "How do you diagnose performance bottlenecks in Git over high-latency networks?",
    "answer": "Use `GIT_TRACE` and `GIT_CURL_VERBOSE` to debug fetch delays. Consider shallow clones, partial clones, and protocol v2. Place mirrors near the users for faster access.",
    "tags": [
      "git",
      "performance",
      "network",
      "debug"
    ],
    "related": [
      "How do you reduce Git latency over VPNs?",
      "What causes Git clone slowness?"
    ]
  },
  {
    "question": "How do you use git daemon to host repositories over custom protocols?",
    "answer": "`git daemon` serves repositories via the `git://` protocol. Start it with a config pointing to export-allowed directories. It supports anonymous, read-only access over TCP.",
    "tags": [
      "git",
      "daemon",
      "hosting",
      "protocol"
    ],
    "related": [
      "What are alternatives to git daemon?",
      "How do you set up Git over ssh or https?"
    ]
  },
  {
    "question": "What is the role of smart HTTP in improving Git operations over the web?",
    "answer": "Smart HTTP allows Git to use HTTP(S) while optimizing data transfer like SSH. It enables authentication, better error messages, and efficient protocol negotiation for Git clients.",
    "tags": [
      "git",
      "http",
      "smart",
      "performance"
    ],
    "related": [
      "What\u2019s the difference between dumb and smart Git HTTP?",
      "How do you secure Git over HTTP?"
    ]
  },
  {
    "question": "How do you troubleshoot connectivity issues with Git over SSH?",
    "answer": "Run `ssh -T git@github.com` to test the connection. Check key permissions, `~/.ssh/config`, firewalls, and host authenticity. Use verbose mode `ssh -v` for debugging.",
    "tags": [
      "git",
      "ssh",
      "connectivity",
      "troubleshooting"
    ],
    "related": [
      "How do you fix permission denied SSH errors?",
      "What config issues break Git SSH connections?"
    ]
  },
  {
    "question": "How do you foster engagement in open-source projects hosted on GitHub?",
    "answer": "Create good first issues, maintain clear CONTRIBUTING guidelines, use GitHub Discussions, and recognize contributors via badges or shout-outs. Communicate via Issues and PR comments.",
    "tags": [
      "github",
      "community",
      "open-source",
      "engagement"
    ],
    "related": [
      "How do you grow an open-source community on GitHub?",
      "What tools support contributor recognition?"
    ]
  },
  {
    "question": "How do you set up community guidelines and enforce them on GitHub?",
    "answer": "Add a `CODE_OF_CONDUCT.md`, use Discussions for moderation, and enforce respectful behavior via GitHub\u2019s report system. Use templates for issues and PRs to guide communication.",
    "tags": [
      "github",
      "community",
      "conduct",
      "guidelines"
    ],
    "related": [
      "What\u2019s the purpose of a code of conduct?",
      "How do you moderate GitHub Discussions?"
    ]
  },
  {
    "question": "What tools can you use to track community contributions in GitHub repositories?",
    "answer": "Use GitHub contributor graphs, `git shortlog`, and community metrics via GraphQL API. Tools like Orbit, AllContributors, and Starscope provide insights into contributor behavior.",
    "tags": [
      "github",
      "metrics",
      "contributors",
      "community"
    ],
    "related": [
      "How do you identify top contributors in a repo?",
      "What GitHub features track community activity?"
    ]
  },
  {
    "question": "How do you host hackathons or coding challenges using GitHub repositories?",
    "answer": "Create a central repo with rules, starter code, and templates. Accept submissions via forks and PRs. Use GitHub Projects for tracking and Discussions for Q&A. Automate scoring with Actions.",
    "tags": [
      "github",
      "events",
      "hackathon",
      "challenge"
    ],
    "related": [
      "How do you organize virtual coding events on GitHub?",
      "What are best practices for GitHub-hosted competitions?"
    ]
  },
  {
    "question": "How do you automate welcome messages for new contributors on GitHub?",
    "answer": "Use GitHub Actions with a bot like `peter-evans/welcome` to detect first-time contributors and post comments on issues or PRs. Customize the message using templates.",
    "tags": [
      "github",
      "automation",
      "contributors",
      "welcome"
    ],
    "related": [
      "How do you build a custom GitHub bot?",
      "What bots support open-source community onboarding?"
    ]
  },
  {
    "question": "How do you manage repositories with multiple programming languages efficiently?",
    "answer": "Organize code by language in subdirectories, use separate build/test pipelines, and specify file-level linting rules. Use GitHub Actions with matrix builds per language.",
    "tags": [
      "github",
      "multi-language",
      "repository",
      "ci/cd"
    ],
    "related": [
      "How do you test multi-language repos on GitHub?",
      "What folder structure suits polyglot projects?"
    ]
  },
  {
    "question": "How do you standardize formatting across different codebases in a repository using .editorconfig?",
    "answer": "Create a `.editorconfig` file to define indentation, line endings, and charset per file type. Supported by many editors and IDEs to enforce consistent code style across contributors.",
    "tags": [
      "git",
      "editorconfig",
      "style",
      "consistency"
    ],
    "related": [
      "How do you enforce style rules in Git projects?",
      "What\u2019s the role of .editorconfig vs linters?"
    ]
  },
  {
    "question": "How do you handle dependency conflicts in multi-language projects using Git?",
    "answer": "Use language-specific dependency managers (npm, pip, bundler) and lock files. Separate `package.json`, `requirements.txt`, etc. Use CI to validate isolated environments per language.",
    "tags": [
      "git",
      "dependencies",
      "multi-language",
      "conflicts"
    ],
    "related": [
      "How do you resolve version clashes in polyglot repos?",
      "What CI patterns support multi-language workflows?"
    ]
  },
  {
    "question": "How do you track language-specific contributions in Git commits?",
    "answer": "Use tools like GitHub's linguist, `git log --stat`, or GitHub API to filter commits by file type. Third-party analytics tools can visualize contributions by language.",
    "tags": [
      "git",
      "contributions",
      "language",
      "analytics"
    ],
    "related": [
      "How do you identify commit patterns by file type?",
      "What GitHub insights reveal language usage?"
    ]
  },
  {
    "question": "How do you use Git branches to isolate language-specific codebases in large projects?",
    "answer": "Create branches per language (e.g., `lang-python`, `lang-java`), or use directory-level separation with unified branches. Test changes in parallel and merge into a stable branch if needed.",
    "tags": [
      "git",
      "branches",
      "language",
      "structure"
    ],
    "related": [
      "How do you manage i18n/localization branches in Git?",
      "When should you branch vs split repos for languages?"
    ]
  },
  {
    "question": "How do you manage documentation repositories with continuous updates using Git?",
    "answer": "Use a dedicated docs repo or folder, automate versioning with tags, and deploy using GitHub Pages. Tools like MkDocs, Docusaurus, or Sphinx help maintain structure.",
    "tags": [
      "git",
      "documentation",
      "updates",
      "automation"
    ],
    "related": [
      "How do you automate doc site deployment from Git?",
      "What\u2019s a good folder structure for docs in Git?"
    ]
  },
  {
    "question": "How do you identify stale branches in large-scale repositories?",
    "answer": "Use `git branch --merged` or GitHub API to list unmerged branches. Combine with last commit date to flag inactivity. Automate cleanup via scheduled workflows or bots.",
    "tags": [
      "git",
      "branches",
      "stale",
      "cleanup"
    ],
    "related": [
      "How do you delete old feature branches safely?",
      "What bots help identify inactive Git branches?"
    ]
  },
  {
    "question": "How do you track breaking changes across microservices architectures using Git commits?",
    "answer": "Use conventional commits or commit tags like `BREAKING CHANGE:`. Enforce via commit linting. CI tools can scan commit logs and raise alerts or block merges if detected.",
    "tags": [
      "git",
      "microservices",
      "breaking-change",
      "ci"
    ],
    "related": [
      "How do you prevent regressions in shared APIs?",
      "What commit strategies flag risky changes?"
    ]
  },
  {
    "question": "How do you resolve version mismatches across interdependent Git repositories?",
    "answer": "Use version constraints in dependencies (e.g., semantic version ranges), pin compatible versions in lock files, and automate tests across repos using CI matrix builds or dependency bots.",
    "tags": [
      "git",
      "dependencies",
      "versioning",
      "ci"
    ],
    "related": [
      "How do you sync release cycles across Git repos?",
      "How do monorepos simplify version alignment?"
    ]
  },
  {
    "question": "How do you use Git and GitHub for managing and versioning creative assets like audio and video files?",
    "answer": "Track metadata and small assets in Git. Use Git LFS for large media files. Store versions by tagging, use folders for iterations, and share previews via GitHub Pages or Releases.",
    "tags": [
      "git",
      "github",
      "media",
      "versioning"
    ],
    "related": [
      "How do you manage large binary assets in Git?",
      "What are GitHub best practices for media teams?"
    ]
  }
]